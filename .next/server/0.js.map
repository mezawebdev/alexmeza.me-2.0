{"version":3,"file":"0.js","sources":["webpack:///./components/World/Camera.js","webpack:///./components/World/Config.js","webpack:///./components/World/Effects.js","webpack:///./components/World/Ground.js","webpack:///./components/World/Light.js","webpack:///./components/World/Stars.js","webpack:///./components/World/Utils.js","webpack:///./components/World/World.js","webpack:///./public/js/vendor/flexBackground.js"],"sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport Utils from \"./Utils\";\n\nclass Camera {\n    constructor(canvas, scene) {\n        this.scene = scene;\n        this.setCamera();\n        this.defaultCamera.setTarget(new BABYLON.Vector3(Config.camera.initialTarget.x, Config.camera.initialTarget.y, Config.camera.initialTarget.z));\n\n        if (Config.debug.cameraControls) {\n            this.defaultCamera.attachControl(canvas, true);\n        }\n\n        this.defaultCamera.minZ = 0;\n    }\n\n    setCamera() {\n        switch (Config.camera.type) {\n            case \"free\":\n                this.defaultCamera = new BABYLON.UniversalCamera(\n                    \"UniversalCamera\", \n                    new BABYLON.Vector3(Config.camera.initialPosition.x, Config.camera.initialPosition.y, Config.camera.initialPosition.z), \n                    this.scene\n                );\n            break;\n            case \"arc\":\n                this.defaultCamera = new BABYLON.ArcRotateCamera(\n                    \"Camera\", \n                    0, \n                    0, \n                    0, \n                    new BABYLON.Vector3(Config.camera.initialPosition.x, Config.camera.initialPosition.y, Config.camera.initialPosition.z), \n                    this.scene\n                );\n            break;\n        }\n    }\n}\n\nexport default Camera;","export default {\n    debug: {\n        axis: true,\n        axisSize: 1.5,\n        cameraControls: true\n    },\n    canvas: {\n        style: {\n            background: \"radial-gradient(circle, rgba(50,37,107,1) 0%, rgba(14,8,32,1) 100%)\"\n        }\n    },\n    stars: {\n        show: true,\n        numberOfPoints: 150,\n        radius: 0.25,\n        interval: 50,\n        color: \"rgb(250, 250, 250)\"\n    },\n    camera: {\n        type: \"free\",\n        maxZ: 10,\n        initialPosition: {\n            x: -1.5,\n            y: 0.2,\n            z: -1.5\n        },\n        initialTarget: {\n            x: 0.5,\n            y: 0.5,\n            z: 0.5\n        },\n        walk: true,\n        walkSpeed: 0.01\n    },\n    effects: {\n        glow: {\n            intensity: 0.25\n        }\n    },\n    ground: {\n        heightMap: \"images/height_map5.png\",\n        width: 4,\n        height: 15,\n        textureHeight: 0.75,\n        subdivisions: 25,\n        rotation: 0.785,\n        grid: {\n            mainColor: new BABYLON.Color3.FromHexString(\"#41093c\"),\n            lineColor: new BABYLON.Color3.FromHexString(\"#e55ec9\"),\n            gridRatio: 0.1,\n            majorUnitFrequency: 1,\n            opacity: 1\n        }\n    }\n}","import Config from \"./Config\";\n\nclass Effects {\n    constructor(scene) {\n        this.scene = scene;\n        this.createGlow();\n    }\n\n    createGlow() {\n        this.glow = new BABYLON.GlowLayer(\"glow\", this.scene);\n\n        this.glow.intensity = Config.effects.glow.intensity;\n    }\n}\n\nexport default Effects;","import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        // this.setTerrain();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n\n        // this.defaultGround.setPosition(new BABYLON.Vector3(2, 2, 0));\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        // terrain.mesh.material = terrainMaterial;\n        // terrain.subToleranceX = 8;\n        // terrain.subToleranceZ = 8;\n        // terrain.LODLimits = [4, 3, 2, 1, 1];\n        // terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.grid.opacity;\n        this.gridMaterial.emissiveColor = Config.ground.grid.lineColor;\n        this.defaultGround.material = this.gridMaterial;\n    }\n}\n\nexport default Ground;","class Light {\n    constructor(scene) {\n        this.lights = [\n            new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 1), scene)\n        ]\n\n        // this.lights[0].intensity = 30;\n    }\n}\n\nexport default Light;","import $ from \"jquery\";\nimport jQuery from \"jquery\";\nimport React from \"react\";\nimport Config from \"./Config\";\nimport \"../../assets/scss/stars.scss\";\n\nclass Stars extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        window.jQuery = jQuery;\n        console.log($(\"#stars\"));\n\n        require(\"../../public/js/vendor/flexBackground.js\");\n        $(\"#stars\").flexBackground({\n            numberOfPoints: Config.stars.numberOfPoints,\n\t\t\tradius: Config.stars.radius,\n\t\t\tinterval: Config.stars.interval,\n\t\t\tcolor: Config.stars.color\n        });\n    }\n\n    render() {\n        return (\n            <canvas id=\"stars\">\n\n            </canvas>\n        );\n    }\n}\n\nexport default Stars;","export default {\n    showWorldAxis(size, scene) {\n        var makeTextPlane = function(text, color, size) {\n            var dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", 50, scene, true);\n            dynamicTexture.hasAlpha = true;\n            dynamicTexture.drawText(text, 5, 40, \"bold 36px Arial\", color , \"transparent\", true);\n            var plane = BABYLON.Mesh.CreatePlane(\"TextPlane\", size, scene, true);\n            plane.material = new BABYLON.StandardMaterial(\"TextPlaneMaterial\", scene);\n            plane.material.backFaceCulling = false;\n            plane.material.specularColor = new BABYLON.Color3(0, 0, 0);\n            plane.material.diffuseTexture = dynamicTexture;\n        return plane;\n         };\n        var axisX = BABYLON.Mesh.CreateLines(\"axisX\", [ \n          BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0), \n          new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)\n          ], scene);\n        axisX.color = new BABYLON.Color3(1, 0, 0);\n        var xChar = makeTextPlane(\"X\", \"red\", size / 10);\n        xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);\n        var axisY = BABYLON.Mesh.CreateLines(\"axisY\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( -0.05 * size, size * 0.95, 0), \n            new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3( 0.05 * size, size * 0.95, 0)\n            ], scene);\n        axisY.color = new BABYLON.Color3(0, 1, 0);\n        var yChar = makeTextPlane(\"Y\", \"green\", size / 10);\n        yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);\n        var axisZ = BABYLON.Mesh.CreateLines(\"axisZ\", [\n            BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0 , -0.05 * size, size * 0.95),\n            new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3( 0, 0.05 * size, size * 0.95)\n            ], scene);\n        axisZ.color = new BABYLON.Color3(0, 0, 1);\n        var zChar = makeTextPlane(\"Z\", \"blue\", size / 10);\n        zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);\n    }\n}","import React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"./Config\";\nimport Ground from \"./Ground\";\nimport Camera from \"./Camera\";\nimport Light from \"./Light\";\nimport Utils from \"./Utils\";\nimport Effects from \"./Effects\";\nimport Stars from \"./Stars\";\n\nclass World extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvas = React.createRef();\n    }\n\n    resize() {\n        this.canvas.current.width = window.innerWidth;\n        this.canvas.current.height = window.innerHeight;\n        this.engine.resize();\n    }\n\n    startEngine() {\n        this.engine = new BABYLON.Engine(this.canvas.current, true);\n        this.scene = new BABYLON.Scene(this.engine);\n        this.camera = new Camera(this.canvas.current, this.scene);\n    }\n\n    renderWorld() {\n        this.scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);\n        this.light = new Light(this.scene);\n        this.ground = new Ground(this.scene);\n        this.effects = new Effects(this.scene);\n    }\n\n    componentDidMount() {\n        this.startEngine();\n\n        this.renderWorld();\n\n        if (Config.debug.axis) {\n            Utils.showWorldAxis(Config.debug.axisSize, this.scene);\n        }\n\n        this.engine.runRenderLoop(() => { \n            this.scene.render();\n        });\n\n        if (Config.stars.show) {\n            this.stars = new Stars();\n        }\n\n        this.resize();\n\n        window.addEventListener(\"resize\", () => { \n            this.resize();\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Stars />\n                <canvas \n                    id=\"canvas\"\n                    style={ Config.canvas.style }\n                    ref={ this.canvas }>\n                </canvas>\n            </div>\n        );\n    }\n}\n\nexport default World;","(function($){\n\t$.fn.flexBackground = function(options){\n\t'use strict';\n\n\t\t/**------------------ SETTING PARAMETERS ------------------**/\n\t\t\n\n\t\tvar height;\n\t\tvar width;\n\t\tvar points = 800;\n\n\t\tvar numberOfPoints = 200;\n\t\tvar radius = 1;\n\t\tvar interval = 50;\n\t\tvar color = {r:256, g:256, b:256};\n\t\t\n\t\tvar config = {};\n\t\tif(options){\n\t\t\t$.extend(config, options);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t/**------------------ BEGIN FUNCTION BODY ------------------**/\n\t\t\n\t\t\n\t\t\n\t\t\tvar selector = $(this);\n\t\t\tvar selectorCan = $(\"#stars\");\n\t\t\t\n\t\t\tif(config.numberOfPoints)\n\t\t\t\tpoints = parseInt(config.numberOfPoints, 10);\n\t\t\t\n\t\t\tif(config.radius)\n\t\t\t\tradius = parseInt(config.radius, 10);\n\t\t\t\n\t\t\tif(config.interval)\n\t\t\t\tinterval = parseInt(config.interval, 10);\n\t\t\t\n\t\t\tif(config.color){\n\t\t\t\tvar regExp = new RegExp(\"\\\\d+\", \"g\");\n\t\t\t\tcolor.r = regExp.exec(config.color);\n\t\t\t\tcolor.g = regExp.exec(config.color);\n\t\t\t\tcolor.b = regExp.exec(config.color);\n\t\t\t}\n\t\t\t\n\t\t\t/**------------------------------------------------  SETTING FUNCTIONS ------------------------------------------------- **/\n\n\t\t\twidth = selector.width();\n\t\t\theight = selector.height();\n\t\t\t\n\t\t\tselectorCan.attr('height', height);\n\t\t\tselectorCan.attr('width', width);\n\t\t\t\n\t\t\tvar canvas = selectorCan[0];\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t\tvar snow = new Array();\n\n\t\t\tfunction refresh(){\n\t\t\t\twidth = selector.width();\n\t\t\t\theight = selector.height();\n\t\t\t\t\n\t\t\t\tselectorCan.attr('height', height);\n\t\t\t\tselectorCan.attr('width', width);\n\t\t\t\t\n\t\t\t\tfor(var i = 0; i < points; i++){\n\t\t\t\t\tvar tempVar;\n\t\t\t\t\t snow[i] = {posX:100, posY:100, initialX:100, initialY:100, radius : 3, opacity : .5, initialOpacity: .5};\n\t\t\t\t\t snow[i].posX = width * Math.random();\n\t\t\t\t\t snow[i].posY = height * Math.random();\n\t\t\t\t\t  snow[i].initialX =  snow[i].posX;\n\t\t\t\t\t  snow[i].initialY =  snow[i].posY;\n\t\t\t\t\t snow[i].radius = Math.random()*radius;\n\t\t\t\t\t snow[i].opacity = Math.random();\n\t\t\t\t\t snow[i].initialOpacity = snow[i].opacity;\n\n\t\t\t\t }\n\t\t\t}\n\t\t\t\n\t\t\tfunction createSnow(snowID){\n\t\t\t\tctx.beginPath();\n\t\t\t\t\n\t\t\t\tctx.arc(snow[snowID].posX, snow[snowID].posY, snow[snowID].radius, 0, 2 * Math.PI, false);\n\n\t\t\t\tctx.fillStyle = \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \",\" + snow[snowID].opacity + \")\";\n\t\t\t\tctx.fill();\n\t\t\t\tctx.closePath();\n\t\t\t\t\n\t\t\t\tsnow[snowID].posX = snow[snowID].posX - (width/2 - snow[snowID].posX)/200;\n\t\t\t\tsnow[snowID].posY = snow[snowID].posY - (height/2 - snow[snowID].posY)/200;\n\t\t\t\tsnow[snowID].radius += .005;\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(snow[snowID].posX < 0 || snow[snowID].posY < 0 || snow[snowID].posX > width || snow[snowID].posY > height){\n\t\t\t\t\tsnow[snowID].posX = snow[snowID].initialX;\n\t\t\t\t\tsnow[snowID].posY = snow[snowID].initialY;\n\t\t\t\t\tsnow[snowID].radius = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(snow[snowID].radius > 2){\n\t\t\t\t\tif(snow[snowID].opacity >= 0){\n\t\t\t\t\t\tsnow[snowID].opacity -= .05;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsnow[snowID].posX = snow[snowID].initialX;\n\t\t\t\t\t\tsnow[snowID].posY = snow[snowID].initialY;\n\t\t\t\t\t\tsnow[snowID].radius = 0;\n\t\t\t\t\t\tsnow[snowID].opacity = snow[snowID].initialOpacity;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\t\t\t\n\t\t\tfunction setBackground(){\n\t\t\t\t\t\t\t\t\t\n\t\t\t\tctx.clearRect(0, 0, width, height);\n\t\t\t\t\n\t\t\t\tfor(var i = 0; i < points; i++){\n\t\t\t\t\tcreateSnow(i);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\trefresh();\n\t\t\tsetInterval(setBackground, interval);\n\n\t\t\t$(window).resize(function(){\n\t\t\t\trefresh();\n\t\t\t})\n\n\t\t\n\t}\n})(jQuery)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAQA;AAjBA;AAmBA;AACA;AAlCA;AACA;AAmCA;;;;;;;;;;;;ACxCA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAdA;AAgBA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAPA;AAvCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAXA;AACA;AAYA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAYA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;AACA;AAsGA;;;;;;;;;;;;AC3GA;AAAA;AACA;AACA;AAKA;AACA;AARA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAzBA;AACA;AA0BA;;;;;;;;;;;;ACjCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAnCA;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AA7DA;AACA;AA8DA;;;;;;;;;;;ACzEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;;;;A","sourceRoot":""}