{"version":3,"file":"static/webpack/1.b5654e36d77898c5054a.hot-update.js","sources":["webpack:///./components/World/Ground.js"],"sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        // this.setTerrain();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n        \n        this.defaultGround.position.x = 5;\n        this.defaultGround.position.z = 5;\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        // terrain.mesh.material = terrainMaterial;\n        // terrain.subToleranceX = 8;\n        // terrain.subToleranceZ = 8;\n        // terrain.LODLimits = [4, 3, 2, 1, 1];\n        // terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.grid.opacity;\n        this.gridMaterial.emissiveColor = Config.ground.grid.lineColor;\n        this.defaultGround.material = this.gridMaterial;\n    }\n}\n\nexport default Ground;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;;;AACA;AACA;AAYA;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}