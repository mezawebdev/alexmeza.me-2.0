{"ast":null,"code":"import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n  constructor(scene) {\n    this.scene = scene;\n    this.createGround(); // this.setTerrain();\n\n    this.setMaterial();\n  }\n\n  createGround() {\n    this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.ground.heightMap, Config.ground.width, Config.ground.height, Config.ground.subdivisions, 0, Config.ground.textureHeight, this.scene, true);\n    this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD); // this.defaultGround.setPosition(new BABYLON.Vector3(2, 2, 0));\n  }\n\n  setTerrain() {// let script = document.createElement(\"script\");\n    // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n    // document.body.appendChild(script);\n    // script.onload = () => {\n    //     var mapSubX = 500;\n    //     var mapSubZ = 300;\n    //     var terrainSub = 100;\n    //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n    //     for (var l = 0; l < mapSubZ; l++) {           \n    //         for (var w = 0; w < mapSubX; w++) {                \n    //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //        }            \n    //     }\n    //     var params = {\n    //         mapData: mapData,\n    //         mapSubX: mapSubX,\n    //         mapSubZ: mapSubZ,\n    //         terrainSub: terrainSub\n    //     };\n    //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    //     terrain.mesh.material = terrainMaterial;\n    //     terrain.subToleranceX = 8;\n    //     terrain.subToleranceZ = 8;\n    //     terrain.LODLimits = [4, 3, 2, 1, 1];\n    //     terrainCreated = true;\n    // }\n    // var mapSubX = 500;\n    //     var mapSubZ = 300;\n    //     var terrainSub = 100;\n    //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n    //     for (var l = 0; l < mapSubZ; l++) {           \n    //         for (var w = 0; w < mapSubX; w++) {                \n    //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //        }            \n    //     }\n    //     var params = {\n    //         mapData: mapData,\n    //         mapSubX: mapSubX,\n    //         mapSubZ: mapSubZ,\n    //         terrainSub: terrainSub\n    //     };\n    // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    // terrain.mesh.material = terrainMaterial;\n    // terrain.subToleranceX = 8;\n    // terrain.subToleranceZ = 8;\n    // terrain.LODLimits = [4, 3, 2, 1, 1];\n    // terrainCreated = true;\n  }\n\n  setMaterial() {\n    this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n    this.grid.mainColor = Config.ground.grid.mainColor;\n    this.grid.lineColor = Config.ground.grid.lineColor;\n    this.grid.gridRatio = Config.ground.grid.gridRatio;\n    this.grid.backFaceCulling = false;\n    this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n    this.grid.opacity = Config.ground.grid.opacity;\n    this.defaultGround.material = this.grid;\n  }\n\n}\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["BABYLON","Config","Materials","Ground","constructor","scene","createGround","setMaterial","defaultGround","Mesh","CreateGroundFromHeightMap","ground","heightMap","width","height","subdivisions","textureHeight","rotate","Axis","Y","rotation","Space","WORLD","setTerrain","grid","GridMaterial","mainColor","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","material"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;;AAEA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,YAAL,GAHe,CAKf;;AAEA,SAAKC,WAAL;AACH;;AAEDD,EAAAA,YAAY,GAAG;AACX,SAAKE,aAAL,GAAqB,IAAIR,OAAO,CAACS,IAAR,CAAaC,yBAAjB,CACjB,QADiB,EAEjBT,MAAM,CAACU,MAAP,CAAcC,SAFG,EAGjBX,MAAM,CAACU,MAAP,CAAcE,KAHG,EAIjBZ,MAAM,CAACU,MAAP,CAAcG,MAJG,EAKjBb,MAAM,CAACU,MAAP,CAAcI,YALG,EAMjB,CANiB,EAOjBd,MAAM,CAACU,MAAP,CAAcK,aAPG,EAQjB,KAAKX,KARY,EASjB,IATiB,CAArB;AAYA,SAAKG,aAAL,CAAmBS,MAAnB,CAA0BjB,OAAO,CAACkB,IAAR,CAAaC,CAAvC,EAA0ClB,MAAM,CAACU,MAAP,CAAcS,QAAxD,EAAkEpB,OAAO,CAACqB,KAAR,CAAcC,KAAhF,EAbW,CAeX;AACH;;AAEDC,EAAAA,UAAU,GAAG,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDhB,EAAAA,WAAW,GAAG;AACV,SAAKiB,IAAL,GAAY,IAAItB,SAAS,CAACuB,YAAd,CAA2B,cAA3B,EAA2C,KAAKpB,KAAhD,CAAZ;AACA,SAAKmB,IAAL,CAAUE,SAAV,GAAsBzB,MAAM,CAACU,MAAP,CAAca,IAAd,CAAmBE,SAAzC;AACA,SAAKF,IAAL,CAAUG,SAAV,GAAsB1B,MAAM,CAACU,MAAP,CAAca,IAAd,CAAmBG,SAAzC;AACA,SAAKH,IAAL,CAAUI,SAAV,GAAsB3B,MAAM,CAACU,MAAP,CAAca,IAAd,CAAmBI,SAAzC;AACA,SAAKJ,IAAL,CAAUK,eAAV,GAA4B,KAA5B;AACA,SAAKL,IAAL,CAAUM,kBAAV,GAA+B7B,MAAM,CAACU,MAAP,CAAca,IAAd,CAAmBM,kBAAlD;AACA,SAAKN,IAAL,CAAUO,OAAV,GAAoB9B,MAAM,CAACU,MAAP,CAAca,IAAd,CAAmBO,OAAvC;AACA,SAAKvB,aAAL,CAAmBwB,QAAnB,GAA8B,KAAKR,IAAnC;AACH;;AAnGQ;;AAsGb,eAAerB,MAAf","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        // this.setTerrain();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n\n        // this.defaultGround.setPosition(new BABYLON.Vector3(2, 2, 0));\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        // terrain.mesh.material = terrainMaterial;\n        // terrain.subToleranceX = 8;\n        // terrain.subToleranceZ = 8;\n        // terrain.LODLimits = [4, 3, 2, 1, 1];\n        // terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.grid.mainColor = Config.ground.grid.mainColor;\n        this.grid.lineColor = Config.ground.grid.lineColor;\n        this.grid.gridRatio = Config.ground.grid.gridRatio;\n        this.grid.backFaceCulling = false;\n        this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.grid.opacity = Config.ground.grid.opacity;\n        this.defaultGround.material = this.grid;\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}