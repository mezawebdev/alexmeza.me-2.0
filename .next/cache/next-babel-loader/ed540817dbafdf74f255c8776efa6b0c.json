{"ast":null,"code":"import Config from \"./Config\";\n\nclass DynamicGround {\n  constructor(scene) {\n    this.scene = scene;\n    let mapSubX = 500,\n        mapSubZ = 500,\n        mapData = new Float32Array(mapSubX * mapSubZ * 3); // for (var l = 0; l < mapSubZ; l++) {           \n    //     for (var w = 0; w < mapSubX; w++) {                \n    //         mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //         mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n    //         mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //    }            \n    // }\n\n    var params = {\n      mapData: mapData,\n      mapSubX: mapSubX,\n      mapSubZ: mapSubZ,\n      terrainSub: 200\n    };\n    this.ground = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    this.ground.subToleranceX = 16;\n    this.ground.subToleranceZ = 16;\n    this.ground.LODLimits = [4, 3, 2, 1, 1];\n  }\n\n  setMaterial() {\n    this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n    this.gridMaterial.mainColor = Config.ground.dynamic.grid.mainColor;\n    this.gridMaterial.lineColor = Config.ground.dynamic.grid.lineColor;\n    this.gridMaterial.gridRatio = Config.ground.dynamic.grid.gridRatio;\n    this.gridMaterial.backFaceCulling = false;\n    this.gridMaterial.majorUnitFrequency = Config.ground.dynamic.grid.majorUnitFrequency;\n    this.gridMaterial.opacity = Config.ground.dynamic.grid.opacity;\n    this.ground.mesh.material = this.gridMaterial;\n  }\n\n}\n\nexport default DynamicGround;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/DynamicGround.js"],"names":["Config","DynamicGround","constructor","scene","mapSubX","mapSubZ","mapData","Float32Array","params","terrainSub","ground","BABYLON","DynamicTerrain","subToleranceX","subToleranceZ","LODLimits","setMaterial","gridMaterial","GridMaterial","mainColor","dynamic","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","mesh","material"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AAEA,QAAIC,OAAO,GAAG,GAAd;AAAA,QACIC,OAAO,GAAG,GADd;AAAA,QAEIC,OAAO,GAAG,IAAIC,YAAJ,CAAiBH,OAAO,GAAGC,OAAV,GAAoB,CAArC,CAFd,CAHe,CAOf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIG,MAAM,GAAG;AACTF,MAAAA,OAAO,EAAEA,OADA;AAETF,MAAAA,OAAO,EAAEA,OAFA;AAGTC,MAAAA,OAAO,EAAEA,OAHA;AAITI,MAAAA,UAAU,EAAE;AAJH,KAAb;AAOA,SAAKC,MAAL,GAAc,IAAIC,OAAO,CAACC,cAAZ,CAA2B,SAA3B,EAAsCJ,MAAtC,EAA8C,KAAKL,KAAnD,CAAd;AACA,SAAKO,MAAL,CAAYG,aAAZ,GAA4B,EAA5B;AACA,SAAKH,MAAL,CAAYI,aAAZ,GAA4B,EAA5B;AACA,SAAKJ,MAAL,CAAYK,SAAZ,GAAwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAxB;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,SAAKC,YAAL,GAAoB,IAAIN,OAAO,CAACO,YAAZ,CAAyB,cAAzB,EAAyC,KAAKf,KAA9C,CAApB;AACA,SAAKc,YAAL,CAAkBE,SAAlB,GAA8BnB,MAAM,CAACU,MAAP,CAAcU,OAAd,CAAsBC,IAAtB,CAA2BF,SAAzD;AACA,SAAKF,YAAL,CAAkBK,SAAlB,GAA8BtB,MAAM,CAACU,MAAP,CAAcU,OAAd,CAAsBC,IAAtB,CAA2BC,SAAzD;AACA,SAAKL,YAAL,CAAkBM,SAAlB,GAA8BvB,MAAM,CAACU,MAAP,CAAcU,OAAd,CAAsBC,IAAtB,CAA2BE,SAAzD;AACA,SAAKN,YAAL,CAAkBO,eAAlB,GAAoC,KAApC;AACA,SAAKP,YAAL,CAAkBQ,kBAAlB,GAAuCzB,MAAM,CAACU,MAAP,CAAcU,OAAd,CAAsBC,IAAtB,CAA2BI,kBAAlE;AACA,SAAKR,YAAL,CAAkBS,OAAlB,GAA4B1B,MAAM,CAACU,MAAP,CAAcU,OAAd,CAAsBC,IAAtB,CAA2BK,OAAvD;AACA,SAAKhB,MAAL,CAAYiB,IAAZ,CAAiBC,QAAjB,GAA4B,KAAKX,YAAjC;AACH;;AAtCe;;AAyCpB,eAAehB,aAAf","sourcesContent":["import Config from \"./Config\";\n\nclass DynamicGround {\n    constructor(scene) {\n        this.scene = scene;\n\n        let mapSubX = 500,\n            mapSubZ = 500,\n            mapData = new Float32Array(mapSubX * mapSubZ * 3);   \n\n        // for (var l = 0; l < mapSubZ; l++) {           \n        //     for (var w = 0; w < mapSubX; w++) {                \n        //         mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //         mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n        //         mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //    }            \n        // }\n\n        var params = {\n            mapData: mapData,\n            mapSubX: mapSubX,\n            mapSubZ: mapSubZ,\n            terrainSub: 200\n        };\n\n        this.ground = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        this.ground.subToleranceX = 16;\n        this.ground.subToleranceZ = 16;\n        this.ground.LODLimits = [4, 3, 2, 1, 1];\n    }\n\n    setMaterial() {\n        this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.dynamic.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.dynamic.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.dynamic.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.dynamic.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.dynamic.grid.opacity;\n        this.ground.mesh.material = this.gridMaterial;\n    }\n}\n\nexport default DynamicGround;"]},"metadata":{},"sourceType":"module"}