{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as BABYLON from 'babylonjs';\n\nvar World =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(World, _React$Component);\n\n  function World() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, World);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(World)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"refs\", {\n      canvas: React.createRef()\n    });\n\n    return _this;\n  }\n\n  _createClass(World, [{\n    key: \"render\",\n    // engine = new BABYLON.Engine(this.refs.canvas, true);\n    // scene = new BABYLON.Scene(this.engine);\n    // camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0,0,5), this.scene);\n    // light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n    // sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter:2}, this.scene);\n    value: function render() {\n      var _this2 = this;\n\n      this.camera.attachControl(canvas, true);\n      this.engine.runRenderLoop(function () {\n        console.log(_this2);\n\n        _this2.scene.render();\n      });\n      window.addEventListener(\"resize\", function () {\n        _this2.engine.resize();\n      });\n      return __jsx(\"canvas\", {\n        id: \"canvas\",\n        ref: this.refs.canvas,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return World;\n}(React.Component);\n\nexport default World;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js"],"names":["React","BABYLON","World","canvas","createRef","camera","attachControl","engine","runRenderLoop","console","log","scene","render","window","addEventListener","resize","refs","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;;IAEMC,K;;;;;;;;;;;;;;;;;;2DACK;AACHC,MAAAA,MAAM,EAAEH,KAAK,CAACI,SAAN;AADL,K;;;;;;;AAIP;AAEA;AAEA;AAEA;AAEA;6BAES;AAAA;;AACL,WAAKC,MAAL,CAAYC,aAAZ,CAA0BH,MAA1B,EAAkC,IAAlC;AAEA,WAAKI,MAAL,CAAYC,aAAZ,CAA0B,YAAM;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,QAAA,MAAI,CAACC,KAAL,CAAWC,MAAX;AACH,OAHD;AAKAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACpC,QAAA,MAAI,CAACP,MAAL,CAAYQ,MAAZ;AACH,OAFD;AAIA,aACI;AACI,QAAA,EAAE,EAAC,QADP;AAEI,QAAA,GAAG,EAAG,KAAKC,IAAL,CAAUb,MAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAMH;;;;EAjCeH,KAAK,CAACiB,S;;AAoC1B,eAAef,KAAf","sourcesContent":["import React from \"react\";\nimport * as BABYLON from 'babylonjs';\n\nclass World extends React.Component {\n    refs = {\n        canvas: React.createRef()\n    }\n\n    // engine = new BABYLON.Engine(this.refs.canvas, true);\n\n    // scene = new BABYLON.Scene(this.engine);\n\n    // camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0,0,5), this.scene);\n\n    // light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n\n    // sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter:2}, this.scene);\n\n    render() {\n        this.camera.attachControl(canvas, true);\n\n        this.engine.runRenderLoop(() => { \n            console.log(this);\n            this.scene.render();\n        });\n\n        window.addEventListener(\"resize\", () => { \n            this.engine.resize();\n        });\n\n        return (\n            <canvas \n                id=\"canvas\"\n                ref={ this.refs.canvas }>\n            </canvas>\n        );\n    }\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}