{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\nimport \"../../public/js/vendor/babylon.dynamicTerrain.min.js\";\n\nvar Ground =\n/*#__PURE__*/\nfunction () {\n  function Ground(scene) {\n    _classCallCheck(this, Ground);\n\n    this.scene = scene;\n    this.createGround();\n    this.setTerrain();\n    this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n    this.setMaterial();\n  }\n\n  _createClass(Ground, [{\n    key: \"createGround\",\n    value: function createGround() {\n      this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.ground.heightMap, Config.ground.width, Config.ground.height, Config.ground.subdivisions, 0, Config.ground.textureHeight, this.scene, true);\n    }\n  }, {\n    key: \"setTerrain\",\n    value: function setTerrain() {\n      // let script = document.createElement(\"script\");\n      // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n      // document.body.appendChild(script);\n      // script.onload = () => {\n      //     var mapSubX = 500;\n      //     var mapSubZ = 300;\n      //     var terrainSub = 100;\n      //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n      //     for (var l = 0; l < mapSubZ; l++) {           \n      //         for (var w = 0; w < mapSubX; w++) {                \n      //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      //        }            \n      //     }\n      //     var params = {\n      //         mapData: mapData,\n      //         mapSubX: mapSubX,\n      //         mapSubZ: mapSubZ,\n      //         terrainSub: terrainSub\n      //     };\n      //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      //     terrain.mesh.material = terrainMaterial;\n      //     terrain.subToleranceX = 8;\n      //     terrain.subToleranceZ = 8;\n      //     terrain.LODLimits = [4, 3, 2, 1, 1];\n      //     terrainCreated = true;\n      // }\n      var mapSubX = 500;\n      var mapSubZ = 300;\n      var terrainSub = 100;\n      var mapData = new Float32Array(mapSubX * mapSubZ * 3);\n\n      for (var l = 0; l < mapSubZ; l++) {\n        for (var w = 0; w < mapSubX; w++) {\n          mapData[3 * (l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n          mapData[3 * (l * mapSubX + w) + 1] = w / (l + 1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n          mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        }\n      }\n\n      var params = {\n        mapData: mapData,\n        mapSubX: mapSubX,\n        mapSubZ: mapSubZ,\n        terrainSub: terrainSub\n      };\n      terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      terrain.mesh.material = terrainMaterial;\n      terrain.subToleranceX = 8;\n      terrain.subToleranceZ = 8;\n      terrain.LODLimits = [4, 3, 2, 1, 1];\n      terrainCreated = true;\n    }\n  }, {\n    key: \"setMaterial\",\n    value: function setMaterial() {\n      this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n      this.grid.mainColor = Config.ground.grid.mainColor;\n      this.grid.lineColor = Config.ground.grid.lineColor;\n      this.grid.gridRatio = Config.ground.grid.gridRatio;\n      this.grid.backFaceCulling = false;\n      this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n      this.grid.opacity = Config.ground.grid.opacity;\n      this.defaultGround.material = this.grid;\n    }\n  }]);\n\n  return Ground;\n}();\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["BABYLON","Config","Materials","Ground","scene","createGround","setTerrain","defaultGround","rotate","Axis","Y","ground","rotation","Space","WORLD","setMaterial","Mesh","CreateGroundFromHeightMap","heightMap","width","height","subdivisions","textureHeight","mapSubX","mapSubZ","terrainSub","mapData","Float32Array","l","w","Math","sin","cos","params","terrain","DynamicTerrain","mesh","material","terrainMaterial","subToleranceX","subToleranceZ","LODLimits","terrainCreated","grid","GridMaterial","mainColor","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity"],"mappings":"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","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\nimport \"../../public/js/vendor/babylon.dynamicTerrain.min.js\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        this.setTerrain();\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        var mapSubX = 500;\n            var mapSubZ = 300;\n            var terrainSub = 100;\n            var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n            for (var l = 0; l < mapSubZ; l++) {           \n                for (var w = 0; w < mapSubX; w++) {                \n                    mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n                    mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n                    mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n               }            \n            }\n\n            var params = {\n                mapData: mapData,\n                mapSubX: mapSubX,\n                mapSubZ: mapSubZ,\n                terrainSub: terrainSub\n            };\n\n            terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n            terrain.mesh.material = terrainMaterial;\n            terrain.subToleranceX = 8;\n            terrain.subToleranceZ = 8;\n            terrain.LODLimits = [4, 3, 2, 1, 1];\n            terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.grid.mainColor = Config.ground.grid.mainColor;\n        this.grid.lineColor = Config.ground.grid.lineColor;\n        this.grid.gridRatio = Config.ground.grid.gridRatio;\n        this.grid.backFaceCulling = false;\n        this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.grid.opacity = Config.ground.grid.opacity;\n        this.defaultGround.material = this.grid;\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}