{"ast":null,"code":"import Config from \"./Config\";\n\nclass Mountains {\n  constructor(scene) {\n    this.scene = scene;\n    this.createMountains();\n    this.setMaterials();\n  }\n\n  createMountains() {\n    Config.mountains.forEach(mountain => {\n      mountain.mesh = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.mountains.heightMap, Config.mountains.width, Config.mountains.height, Config.mountains.subdivisions, 0, Config.mountains.textureHeight, this.scene, true);\n      mountain.mesh.rotate(BABYLON.Axis.Y, Config.mountains.rotation, BABYLON.Space.WORLD);\n      mountain.mesh.position.x = Config.mountains.x;\n      mountain.mesh.position.z = Config.mountains.z;\n      mountain.mesh.position.y = Config.mountains.y;\n    });\n  }\n\n  setMaterial() {\n    Config.mountains.forEach(mountain => {\n      let gridMaterial = new BABYLON.GridMaterial(`gridMaterial-${Math.round(Math.random() * 100)}`, this.scene);\n      gridMaterial.mainColor = Config.mountains.grid.mainColor;\n      gridMaterial.lineColor = Config.mountains.grid.lineColor;\n      gridMaterial.gridRatio = Config.mountains.grid.gridRatio;\n      gridMaterial.backFaceCulling = false;\n      gridMaterial.majorUnitFrequency = Config.mountains.grid.majorUnitFrequency;\n      gridMaterial.opacity = Config.mountains.grid.opacity;\n      gridMaterial.emissiveColor = Config.mountains.grid.lineColor;\n      mountain.material = gridMaterial;\n    });\n  }\n\n}\n\nexport default Mountains;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Mountains.js"],"names":["Config","Mountains","constructor","scene","createMountains","setMaterials","mountains","forEach","mountain","mesh","BABYLON","Mesh","CreateGroundFromHeightMap","heightMap","width","height","subdivisions","textureHeight","rotate","Axis","Y","rotation","Space","WORLD","position","x","z","y","setMaterial","gridMaterial","GridMaterial","Math","round","random","mainColor","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","emissiveColor","material"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,eAAL;AACA,SAAKC,YAAL;AACH;;AAEDD,EAAAA,eAAe,GAAG;AACdJ,IAAAA,MAAM,CAACM,SAAP,CAAiBC,OAAjB,CAAyBC,QAAQ,IAAI;AACjCA,MAAAA,QAAQ,CAACC,IAAT,GAAgB,IAAIC,OAAO,CAACC,IAAR,CAAaC,yBAAjB,CACZ,QADY,EAEZZ,MAAM,CAACM,SAAP,CAAiBO,SAFL,EAGZb,MAAM,CAACM,SAAP,CAAiBQ,KAHL,EAIZd,MAAM,CAACM,SAAP,CAAiBS,MAJL,EAKZf,MAAM,CAACM,SAAP,CAAiBU,YALL,EAMZ,CANY,EAOZhB,MAAM,CAACM,SAAP,CAAiBW,aAPL,EAQZ,KAAKd,KARO,EASZ,IATY,CAAhB;AAYAK,MAAAA,QAAQ,CAACC,IAAT,CAAcS,MAAd,CAAqBR,OAAO,CAACS,IAAR,CAAaC,CAAlC,EAAqCpB,MAAM,CAACM,SAAP,CAAiBe,QAAtD,EAAgEX,OAAO,CAACY,KAAR,CAAcC,KAA9E;AACAf,MAAAA,QAAQ,CAACC,IAAT,CAAce,QAAd,CAAuBC,CAAvB,GAA2BzB,MAAM,CAACM,SAAP,CAAiBmB,CAA5C;AACAjB,MAAAA,QAAQ,CAACC,IAAT,CAAce,QAAd,CAAuBE,CAAvB,GAA2B1B,MAAM,CAACM,SAAP,CAAiBoB,CAA5C;AACAlB,MAAAA,QAAQ,CAACC,IAAT,CAAce,QAAd,CAAuBG,CAAvB,GAA2B3B,MAAM,CAACM,SAAP,CAAiBqB,CAA5C;AACH,KAjBD;AAkBH;;AAEDC,EAAAA,WAAW,GAAG;AACV5B,IAAAA,MAAM,CAACM,SAAP,CAAiBC,OAAjB,CAAyBC,QAAQ,IAAI;AACjC,UAAIqB,YAAY,GAAG,IAAInB,OAAO,CAACoB,YAAZ,CAA0B,gBAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAiC,EAA3E,EAA8E,KAAK9B,KAAnF,CAAnB;AAEA0B,MAAAA,YAAY,CAACK,SAAb,GAAyBlC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBD,SAA/C;AACAL,MAAAA,YAAY,CAACO,SAAb,GAAyBpC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBC,SAA/C;AACAP,MAAAA,YAAY,CAACQ,SAAb,GAAyBrC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBE,SAA/C;AACAR,MAAAA,YAAY,CAACS,eAAb,GAA+B,KAA/B;AACAT,MAAAA,YAAY,CAACU,kBAAb,GAAkCvC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBI,kBAAxD;AACAV,MAAAA,YAAY,CAACW,OAAb,GAAuBxC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBK,OAA7C;AACAX,MAAAA,YAAY,CAACY,aAAb,GAA6BzC,MAAM,CAACM,SAAP,CAAiB6B,IAAjB,CAAsBC,SAAnD;AACA5B,MAAAA,QAAQ,CAACkC,QAAT,GAAoBb,YAApB;AACH,KAXD;AAYH;;AAzCW;;AA4ChB,eAAe5B,SAAf","sourcesContent":["import Config from \"./Config\";\n\nclass Mountains {\n    constructor(scene) {\n        this.scene = scene;\n        this.createMountains();\n        this.setMaterials();\n    }\n\n    createMountains() {\n        Config.mountains.forEach(mountain => {\n            mountain.mesh = new BABYLON.Mesh.CreateGroundFromHeightMap(\n                \"ground\", \n                Config.mountains.heightMap, \n                Config.mountains.width, \n                Config.mountains.height, \n                Config.mountains.subdivisions, \n                0, \n                Config.mountains.textureHeight, \n                this.scene, \n                true\n            );\n\n            mountain.mesh.rotate(BABYLON.Axis.Y, Config.mountains.rotation, BABYLON.Space.WORLD);\n            mountain.mesh.position.x = Config.mountains.x;\n            mountain.mesh.position.z = Config.mountains.z;\n            mountain.mesh.position.y = Config.mountains.y;\n        });\n    }\n\n    setMaterial() {\n        Config.mountains.forEach(mountain => {\n            let gridMaterial = new BABYLON.GridMaterial(`gridMaterial-${ Math.round(Math.random() * 100) }`, this.scene);\n\n            gridMaterial.mainColor = Config.mountains.grid.mainColor;\n            gridMaterial.lineColor = Config.mountains.grid.lineColor;\n            gridMaterial.gridRatio = Config.mountains.grid.gridRatio;\n            gridMaterial.backFaceCulling = false;\n            gridMaterial.majorUnitFrequency = Config.mountains.grid.majorUnitFrequency;\n            gridMaterial.opacity = Config.mountains.grid.opacity;\n            gridMaterial.emissiveColor = Config.mountains.grid.lineColor;\n            mountain.material = gridMaterial;\n        });\n    }\n}\n\nexport default Mountains;"]},"metadata":{},"sourceType":"module"}