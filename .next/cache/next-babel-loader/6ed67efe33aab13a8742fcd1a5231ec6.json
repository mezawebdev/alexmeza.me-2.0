{"ast":null,"code":"import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n  constructor(scene) {\n    this.scene = scene;\n    this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.ground.heightMap, Config.ground.width, Config.ground.height, Config.ground.subdivisions, 0, Config.ground.textureHeight, this.scene, true);\n    var mapSubX = 500;\n    var mapSubZ = 300;\n    var terrainSub = 100; // map creation\n\n    var mapData = new Float32Array(mapSubX * mapSubZ * 3);\n\n    for (var l = 0; l < mapSubZ; l++) {\n      for (var w = 0; w < mapSubX; w++) {\n        mapData[3 * (l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        mapData[3 * (l * mapSubX + w) + 1] = w / (l + 1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      }\n    }\n\n    console.log(mapData);\n    this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n    this.setMaterial();\n  }\n\n  setMaterial() {\n    this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n    this.grid.mainColor = Config.ground.grid.mainColor;\n    this.grid.lineColor = Config.ground.grid.lineColor;\n    this.grid.gridRatio = Config.ground.grid.gridRatio;\n    this.grid.backFaceCulling = false;\n    this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n    this.grid.opacity = Config.ground.grid.opacity;\n    this.defaultGround.material = this.grid;\n  }\n\n}\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["BABYLON","Config","Materials","Ground","constructor","scene","defaultGround","Mesh","CreateGroundFromHeightMap","ground","heightMap","width","height","subdivisions","textureHeight","mapSubX","mapSubZ","terrainSub","mapData","Float32Array","l","w","Math","sin","cos","console","log","rotate","Axis","Y","rotation","Space","WORLD","setMaterial","grid","GridMaterial","mainColor","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","material"],"mappings":"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","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        var mapSubX = 500;\n        var mapSubZ = 300;\n        var terrainSub = 100;\n\n        // map creation\n        var mapData = new Float32Array(mapSubX * mapSubZ * 3);   \n        for (var l = 0; l < mapSubZ; l++) {           \n            for (var w = 0; w < mapSubX; w++) {                \n                mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n                mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n                mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n           }            \n        }\n\n        console.log(mapData);\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n\n        this.setMaterial();\n    }\n\n    setMaterial() {\n        this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.grid.mainColor = Config.ground.grid.mainColor;\n        this.grid.lineColor = Config.ground.grid.lineColor;\n        this.grid.gridRatio = Config.ground.grid.gridRatio;\n        this.grid.backFaceCulling = false;\n        this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.grid.opacity = Config.ground.grid.opacity;\n        this.defaultGround.material = this.grid;\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}