{"ast":null,"code":"// import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\"; // import * as Materials from \"babylonjs-materials\";\n\nclass Mountains {\n  constructor(scene) {\n    this.scene = scene;\n    this.createGround();\n    this.setMaterial();\n  }\n\n  createGround() {\n    this.defaultMountains = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.mountains.heightMap, Config.mountains.width, Config.mountains.height, Config.mountains.subdivisions, 0, Config.mountains.textureHeight, this.scene, true);\n    this.defaultMountains.rotate(BABYLON.Axis.Y, Config.mountains.rotation, BABYLON.Space.WORLD);\n    this.defaultMountains.position.x = Config.mountains.x;\n    this.defaultMountains.position.z = Config.mountains.z;\n  }\n\n  setTerrain() {// let script = document.createElement(\"script\");\n    // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n    // document.body.appendChild(script);\n    // script.onload = () => {\n    //     var mapSubX = 500;\n    //     var mapSubZ = 300;\n    //     var terrainSub = 100;\n    //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n    //     for (var l = 0; l < mapSubZ; l++) {           \n    //         for (var w = 0; w < mapSubX; w++) {                \n    //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //        }            \n    //     }\n    //     var params = {\n    //         mapData: mapData,\n    //         mapSubX: mapSubX,\n    //         mapSubZ: mapSubZ,\n    //         terrainSub: terrainSub\n    //     };\n    //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    //     terrain.mesh.material = terrainMaterial;\n    //     terrain.subToleranceX = 8;\n    //     terrain.subToleranceZ = 8;\n    //     terrain.LODLimits = [4, 3, 2, 1, 1];\n    //     terrainCreated = true;\n    // }\n    // var mapSubX = 500;\n    //     var mapSubZ = 300;\n    //     var terrainSub = 100;\n    //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n    //     for (var l = 0; l < mapSubZ; l++) {           \n    //         for (var w = 0; w < mapSubX; w++) {                \n    //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n    //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //        }            \n    //     }\n    //     var params = {\n    //         mapData: mapData,\n    //         mapSubX: mapSubX,\n    //         mapSubZ: mapSubZ,\n    //         terrainSub: terrainSub\n    //     };\n    // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    // terrain.mesh.material = terrainMaterial;\n    // terrain.subToleranceX = 8;\n    // terrain.subToleranceZ = 8;\n    // terrain.LODLimits = [4, 3, 2, 1, 1];\n    // terrainCreated = true;\n  }\n\n  setMaterial() {\n    this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n    this.gridMaterial.mainColor = Config.mountains.grid.mainColor;\n    this.gridMaterial.lineColor = Config.mountains.grid.lineColor;\n    this.gridMaterial.gridRatio = Config.mountains.grid.gridRatio;\n    this.gridMaterial.backFaceCulling = false;\n    this.gridMaterial.majorUnitFrequency = Config.mountains.grid.majorUnitFrequency;\n    this.gridMaterial.opacity = Config.mountains.grid.opacity;\n    this.gridMaterial.emissiveColor = Config.mountains.grid.lineColor;\n    this.defaultMountains.material = this.gridMaterial;\n  }\n\n}\n\nexport default Mountains;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Mountains.js"],"names":["Config","Mountains","constructor","scene","createGround","setMaterial","defaultMountains","BABYLON","Mesh","CreateGroundFromHeightMap","mountains","heightMap","width","height","subdivisions","textureHeight","rotate","Axis","Y","rotation","Space","WORLD","position","x","z","setTerrain","gridMaterial","Materials","GridMaterial","mainColor","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","emissiveColor","material"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,UAAnB,C,CACA;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,YAAL;AAEA,SAAKC,WAAL;AACH;;AAEDD,EAAAA,YAAY,GAAG;AACX,SAAKE,gBAAL,GAAwB,IAAIC,OAAO,CAACC,IAAR,CAAaC,yBAAjB,CACpB,QADoB,EAEpBT,MAAM,CAACU,SAAP,CAAiBC,SAFG,EAGpBX,MAAM,CAACU,SAAP,CAAiBE,KAHG,EAIpBZ,MAAM,CAACU,SAAP,CAAiBG,MAJG,EAKpBb,MAAM,CAACU,SAAP,CAAiBI,YALG,EAMpB,CANoB,EAOpBd,MAAM,CAACU,SAAP,CAAiBK,aAPG,EAQpB,KAAKZ,KARe,EASpB,IAToB,CAAxB;AAYA,SAAKG,gBAAL,CAAsBU,MAAtB,CAA6BT,OAAO,CAACU,IAAR,CAAaC,CAA1C,EAA6ClB,MAAM,CAACU,SAAP,CAAiBS,QAA9D,EAAwEZ,OAAO,CAACa,KAAR,CAAcC,KAAtF;AAEA,SAAKf,gBAAL,CAAsBgB,QAAtB,CAA+BC,CAA/B,GAAmCvB,MAAM,CAACU,SAAP,CAAiBa,CAApD;AACA,SAAKjB,gBAAL,CAAsBgB,QAAtB,CAA+BE,CAA/B,GAAmCxB,MAAM,CAACU,SAAP,CAAiBc,CAApD;AACH;;AAEDC,EAAAA,UAAU,GAAG,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDpB,EAAAA,WAAW,GAAG;AACV,SAAKqB,YAAL,GAAoB,IAAIC,SAAS,CAACC,YAAd,CAA2B,cAA3B,EAA2C,KAAKzB,KAAhD,CAApB;AACA,SAAKuB,YAAL,CAAkBG,SAAlB,GAA8B7B,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBD,SAApD;AACA,SAAKH,YAAL,CAAkBK,SAAlB,GAA8B/B,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBC,SAApD;AACA,SAAKL,YAAL,CAAkBM,SAAlB,GAA8BhC,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBE,SAApD;AACA,SAAKN,YAAL,CAAkBO,eAAlB,GAAoC,KAApC;AACA,SAAKP,YAAL,CAAkBQ,kBAAlB,GAAuClC,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBI,kBAA7D;AACA,SAAKR,YAAL,CAAkBS,OAAlB,GAA4BnC,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBK,OAAlD;AACA,SAAKT,YAAL,CAAkBU,aAAlB,GAAkCpC,MAAM,CAACU,SAAP,CAAiBoB,IAAjB,CAAsBC,SAAxD;AACA,SAAKzB,gBAAL,CAAsB+B,QAAtB,GAAiC,KAAKX,YAAtC;AACH;;AAnGW;;AAsGhB,eAAezB,SAAf","sourcesContent":["// import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\n// import * as Materials from \"babylonjs-materials\";\n\nclass Mountains {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultMountains = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.mountains.heightMap, \n            Config.mountains.width, \n            Config.mountains.height, \n            Config.mountains.subdivisions, \n            0, \n            Config.mountains.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultMountains.rotate(BABYLON.Axis.Y, Config.mountains.rotation, BABYLON.Space.WORLD);\n        \n        this.defaultMountains.position.x = Config.mountains.x;\n        this.defaultMountains.position.z = Config.mountains.z;\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        // terrain.mesh.material = terrainMaterial;\n        // terrain.subToleranceX = 8;\n        // terrain.subToleranceZ = 8;\n        // terrain.LODLimits = [4, 3, 2, 1, 1];\n        // terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.mountains.grid.mainColor;\n        this.gridMaterial.lineColor = Config.mountains.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.mountains.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.mountains.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.mountains.grid.opacity;\n        this.gridMaterial.emissiveColor = Config.mountains.grid.lineColor;\n        this.defaultMountains.material = this.gridMaterial;\n    }\n}\n\nexport default Mountains;"]},"metadata":{},"sourceType":"module"}