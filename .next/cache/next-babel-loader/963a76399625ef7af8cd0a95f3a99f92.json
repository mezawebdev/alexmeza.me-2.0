{"ast":null,"code":"var _jsxFileName = \"/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"./Config\";\nimport Utils from \"./Utils\";\nimport Plane from \"./Plane\";\nimport { Camera } from \"babylonjs\";\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  resize() {\n    console.log(this);\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.engine.resize();\n  }\n\n  renderWorld() {}\n\n  componentDidMount() {\n    this.engine = new BABYLON.Engine(this.canvas.current, true);\n    this.scene = new BABYLON.Scene(this.engine);\n    this.camera = new Camera(this.scene);\n    this.camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0, 0, 5), this.scene);\n    this.light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n\n    if (Config.debug) {\n      this.camera.attachControl(this.canvas.current, true);\n      Utils.showWorldAxis(1, this.scene);\n    }\n\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n    this.resize();\n    window.addEventListener(\"resize\", () => {\n      this.resize();\n    });\n  }\n\n  render() {\n    // this.camera.attachControl(canvas, true);\n    // this.engine.runRenderLoop(() => { \n    //     console.log(this);\n    //     this.scene.render();\n    // });\n    // window.addEventListener(\"resize\", () => { \n    //     this.engine.resize();\n    // });\n    return __jsx(\"canvas\", {\n      id: \"canvas\",\n      ref: this.canvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default World;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js"],"names":["React","BABYLON","Config","Utils","Plane","Camera","World","Component","constructor","props","canvas","createRef","resize","console","log","current","width","window","innerWidth","height","innerHeight","engine","renderWorld","componentDidMount","Engine","scene","Scene","camera","ArcRotateCamera","Math","PI","Vector3","light1","HemisphericLight","debug","attachControl","showWorldAxis","runRenderLoop","render","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcV,KAAK,CAACW,SAAN,EAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKJ,MAAL,CAAYK,OAAZ,CAAoBC,KAApB,GAA4BC,MAAM,CAACC,UAAnC;AACA,SAAKR,MAAL,CAAYK,OAAZ,CAAoBI,MAApB,GAA6BF,MAAM,CAACG,WAApC;AACA,SAAKC,MAAL,CAAYT,MAAZ;AACH;;AAEDU,EAAAA,WAAW,GAAG,CAEb;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,MAAL,GAAc,IAAIpB,OAAO,CAACuB,MAAZ,CAAmB,KAAKd,MAAL,CAAYK,OAA/B,EAAwC,IAAxC,CAAd;AACA,SAAKU,KAAL,GAAa,IAAIxB,OAAO,CAACyB,KAAZ,CAAkB,KAAKL,MAAvB,CAAb;AACA,SAAKM,MAAL,GAAc,IAAItB,MAAJ,CAAW,KAAKoB,KAAhB,CAAd;AACA,SAAKE,MAAL,GAAc,IAAI1B,OAAO,CAAC2B,eAAZ,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,EAAL,GAAU,CAAhD,EAAmDD,IAAI,CAACC,EAAL,GAAU,CAA7D,EAAgE,CAAhE,EAAmE,IAAI7B,OAAO,CAAC8B,OAAZ,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,CAAnE,EAA+F,KAAKN,KAApG,CAAd;AACA,SAAKO,MAAL,GAAc,IAAI/B,OAAO,CAACgC,gBAAZ,CAA6B,QAA7B,EAAuC,IAAIhC,OAAO,CAAC8B,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAvC,EAAqE,KAAKN,KAA1E,CAAd;;AAGA,QAAIvB,MAAM,CAACgC,KAAX,EAAkB;AACd,WAAKP,MAAL,CAAYQ,aAAZ,CAA0B,KAAKzB,MAAL,CAAYK,OAAtC,EAA+C,IAA/C;AACAZ,MAAAA,KAAK,CAACiC,aAAN,CAAoB,CAApB,EAAuB,KAAKX,KAA5B;AACH;;AAED,SAAKJ,MAAL,CAAYgB,aAAZ,CAA0B,MAAM;AAC5B,WAAKZ,KAAL,CAAWa,MAAX;AACH,KAFD;AAIA,SAAK1B,MAAL;AAEAK,IAAAA,MAAM,CAACsB,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpC,WAAK3B,MAAL;AACH,KAFD;AAGH;;AAED0B,EAAAA,MAAM,GAAG;AACL;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,WACI;AACI,MAAA,EAAE,EAAC,QADP;AAEI,MAAA,GAAG,EAAG,KAAK5B,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AA3D+B;;AA8DpC,eAAeJ,KAAf","sourcesContent":["import React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"./Config\";\nimport Utils from \"./Utils\";\nimport Plane from \"./Plane\";\nimport { Camera } from \"babylonjs\";\n\nclass World extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvas = React.createRef();\n    }\n\n    resize() {\n        console.log(this);\n        this.canvas.current.width = window.innerWidth;\n        this.canvas.current.height = window.innerHeight;\n        this.engine.resize();\n    }\n\n    renderWorld() {\n\n    }\n\n    componentDidMount() {\n        this.engine = new BABYLON.Engine(this.canvas.current, true);\n        this.scene = new BABYLON.Scene(this.engine);\n        this.camera = new Camera(this.scene);\n        this.camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0,0,5), this.scene);\n        this.light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n\n\n        if (Config.debug) {\n            this.camera.attachControl(this.canvas.current, true);\n            Utils.showWorldAxis(1, this.scene);\n        }\n\n        this.engine.runRenderLoop(() => { \n            this.scene.render();\n        });\n\n        this.resize();\n\n        window.addEventListener(\"resize\", () => { \n            this.resize();\n        });\n    }\n\n    render() {\n        // this.camera.attachControl(canvas, true);\n\n        // this.engine.runRenderLoop(() => { \n        //     console.log(this);\n        //     this.scene.render();\n        // });\n\n        // window.addEventListener(\"resize\", () => { \n        //     this.engine.resize();\n        // });\n\n        return (\n            <canvas \n                id=\"canvas\"\n                ref={ this.canvas }>\n            </canvas>\n        );\n    }\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}