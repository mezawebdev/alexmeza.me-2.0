{"ast":null,"code":"var BABYLON;\n\n(function (BABYLON) {\n  var DynamicTerrain = function () {\n    function DynamicTerrain(name, options, scene) {\n      var _this = this;\n\n      this._particleDataStride = 9;\n      this._particleColorStride = 4;\n      this._particleUVStride = 4;\n      this._typeSPS = 0;\n      this._typeInstance = 1;\n      this._subToleranceX = 1 | 0;\n      this._subToleranceZ = 1 | 0;\n      this._LODLimits = [];\n      this._initialLOD = 1 | 0;\n      this._LODValue = 1 | 0;\n      this._cameraLODCorrection = 0 | 0;\n      this._LODPositiveX = true;\n      this._LODNegativeX = true;\n      this._LODPositiveZ = true;\n      this._LODNegativeZ = true;\n      this._inverted = false;\n      this.shiftFromCamera = {\n        x: 0,\n        z: 0\n      };\n      this._deltaSubX = 0 | 0;\n      this._deltaSubZ = 0 | 0;\n      this._refreshEveryFrame = false;\n      this._useCustomVertexFunction = false;\n      this._computeNormals = false;\n      this._datamap = false;\n      this._uvmap = false;\n      this._colormap = false;\n      this._mapSPData = false;\n      this._colorSPData = false;\n      this._uvSPData = false;\n      this._mapInstanceData = false;\n      this._colorInstanceData = false;\n      this._precomputeInstances = true;\n      this._averageSubSizeX = 0;\n      this._averageSubSizeZ = 0;\n      this._terrainSizeX = 0;\n      this._terrainSizeZ = 0;\n      this._terrainHalfSizeX = 0;\n      this._terrainHalfSizeZ = 0;\n      this._centerWorld = BABYLON.Vector3.Zero();\n      this._centerLocal = BABYLON.Vector3.Zero();\n      this._mapSizeX = 0;\n      this._mapSizeZ = 0;\n      this._isAlwaysVisible = false;\n      this._precomputeNormalsFromMap = false;\n      this.name = name;\n      this._terrainSub = options.terrainSub || 60;\n      this._mapData = options.mapData;\n      this._terrainIdx = this._terrainSub + 1;\n      this._mapSubX = options.mapSubX || this._terrainIdx;\n      this._mapSubZ = options.mapSubZ || this._terrainIdx;\n      this._mapUVs = options.mapUVs;\n      this._mapColors = options.mapColors;\n      this._scene = scene;\n      this._terrainCamera = options.camera || scene.activeCamera;\n      this._inverted = options.invertSide;\n      this._SPmapData = options.SPmapData;\n      this._SPcolorData = options.SPcolorData;\n      this._SPuvData = options.SPuvData;\n      this._sps = options.sps;\n      this._instanceMapData = options.instanceMapData;\n      this._instanceColorData = options.instanceColorData;\n      this._sourceMeshes = options.sourceMeshes;\n      this._precomputeInstances = options.precomputeInstances ? options.precomputeInstances : true;\n      this._datamap = this._mapData ? true : false;\n      this._uvmap = this._mapUVs ? true : false;\n      this._colormap = this._mapColors ? true : false;\n      this._mapSPData = this._SPmapData ? true : false;\n      this._colorSPData = this._mapSPData && this._SPcolorData ? true : false;\n      this._uvSPData = this._mapSPData && this._SPuvData ? true : false;\n      this._mapInstanceData = this._instanceMapData ? true : false;\n      this._colorInstanceData = this._mapInstanceData && this._instanceColorData ? true : false;\n      this._mapData = this._datamap ? this._mapData : new Float32Array(this._terrainIdx * this._terrainIdx * 3);\n      this._mapUVs = this._uvmap ? this._mapUVs : new Float32Array(this._terrainIdx * this._terrainIdx * 2);\n\n      if (this._datamap) {\n        this._mapNormals = options.mapNormals || new Float32Array(this._mapSubX * this._mapSubZ * 3);\n      } else {\n        this._mapNormals = new Float32Array(this._terrainIdx * this._terrainIdx * 3);\n      }\n\n      this._mapQuads = [];\n      var index = 0;\n      var posIndex = 0;\n      var colIndex = 0;\n      var uvIndex = 0;\n      var color;\n      var uv;\n      var terIndex = 0;\n      var y = 0;\n      var terrainPath;\n      var u = 0;\n      var v = 0;\n      var lg = this._terrainIdx + 1;\n      var terrainData = [];\n      var terrainColor = [];\n      var terrainUV = [];\n      var mapData = this._mapData;\n      var mapColors = this._mapColors;\n      var mapUVs = this._mapUVs;\n      var nbAvailableParticlesPerType = [];\n      this._nbAvailableParticlesPerType = nbAvailableParticlesPerType;\n\n      for (var j = 0; j <= this._terrainSub; j++) {\n        terrainPath = [];\n\n        for (var i = 0; i <= this._terrainSub; i++) {\n          index = this._mod(j * 3, this._mapSubZ) * this._mapSubX + this._mod(i * 3, this._mapSubX);\n          posIndex = index * 3;\n          colIndex = index * 3;\n          uvIndex = index * 2;\n          terIndex = j * this._terrainIdx + i;\n\n          if (this._datamap) {\n            y = mapData[posIndex + 1];\n          } else {\n            y = 0;\n            mapData[3 * terIndex] = i;\n            mapData[3 * terIndex + 1] = y;\n            mapData[3 * terIndex + 2] = j;\n          }\n\n          terrainPath.push(new BABYLON.Vector3(i, y, j));\n\n          if (this._colormap) {\n            color = new BABYLON.Color4(mapColors[colIndex], mapColors[colIndex + 1], mapColors[colIndex + 2], 1);\n          } else {\n            color = new BABYLON.Color4(1, 1, 1, 1);\n          }\n\n          terrainColor.push(color);\n\n          if (this._uvmap) {\n            uv = new BABYLON.Vector2(mapUVs[uvIndex], mapUVs[uvIndex + 1]);\n          } else {\n            u = 1 - Math.abs(1 - 2 * i / lg);\n            v = 1 - Math.abs(1 - 2 * j / lg);\n            mapUVs[2 * terIndex] = u;\n            mapUVs[2 * terIndex + 1] = v;\n            uv = new BABYLON.Vector2(u, v);\n          }\n\n          terrainUV.push(uv);\n        }\n\n        terrainData.push(terrainPath);\n      }\n\n      this._mapSizeX = Math.abs(mapData[(this._mapSubX - 1) * 3] - mapData[0]);\n      this._mapSizeZ = Math.abs(mapData[(this._mapSubZ - 1) * this._mapSubX * 3 + 2] - mapData[2]);\n      this._averageSubSizeX = this._mapSizeX / this._mapSubX;\n      this._averageSubSizeZ = this._mapSizeZ / this._mapSubZ;\n      var ribbonOptions = {\n        pathArray: terrainData,\n        sideOrientation: options.invertSide ? BABYLON.Mesh.FRONTSIDE : BABYLON.Mesh.BACKSIDE,\n        colors: terrainColor,\n        uvs: terrainUV,\n        updatable: true\n      };\n      this._terrain = BABYLON.MeshBuilder.CreateRibbon(\"terrain\", ribbonOptions, this._scene);\n      this._indices = this._terrain.getIndices();\n      this._positions = this._terrain.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n      this._normals = this._terrain.getVerticesData(BABYLON.VertexBuffer.NormalKind);\n      this._uvs = this._terrain.getVerticesData(BABYLON.VertexBuffer.UVKind);\n      this._colors = this._terrain.getVerticesData(BABYLON.VertexBuffer.ColorKind);\n      this.computeNormalsFromMap();\n      this.update(true);\n      this._terrain.position.x = this._terrainCamera.globalPosition.x - this._terrainHalfSizeX + this.shiftFromCamera.x;\n      this._terrain.position.z = this._terrainCamera.globalPosition.z - this._terrainHalfSizeZ + this.shiftFromCamera.z;\n      var deltaNbSubX = (this._terrain.position.x - mapData[0]) / this._averageSubSizeX;\n      var deltaNbSubZ = (this._terrain.position.z - mapData[2]) / this._averageSubSizeZ;\n      this._deltaSubX = deltaNbSubX > 0 ? Math.floor(deltaNbSubX) : Math.ceil(deltaNbSubX);\n      this._deltaSubZ = deltaNbSubZ > 0 ? Math.floor(deltaNbSubZ) : Math.ceil(deltaNbSubZ);\n\n      this._scene.onBeforeRenderObservable.add(function () {\n        var refreshEveryFrame = _this._refreshEveryFrame;\n\n        _this.beforeUpdate(refreshEveryFrame);\n\n        _this.update(refreshEveryFrame);\n\n        _this.afterUpdate(refreshEveryFrame);\n      });\n\n      var SPmapData = this._SPmapData;\n      var instanceMapData = this._instanceMapData;\n      var dataStride = this._particleDataStride;\n      var typeSPS = this._typeSPS;\n      var typeInstance = this._typeInstance;\n      var mapSizeX = this._mapSizeX;\n      var mapSizeZ = this._mapSizeZ;\n      var mapSubX = this._mapSubX;\n      var mapSubZ = this._mapSubZ;\n      var quads = this._mapQuads;\n\n      if (this._mapSPData) {\n        var x0 = mapData[0];\n        var z0 = mapData[2];\n\n        for (var t = 0; t < SPmapData.length; t++) {\n          var data = SPmapData[t];\n          var nb = data.length / dataStride | 0;\n\n          for (var pIdx = 0; pIdx < nb; pIdx++) {\n            var dIdx = pIdx * dataStride;\n            var x = data[dIdx];\n            var z = data[dIdx + 2];\n            x = x - Math.floor((x - x0) / mapSizeX) * mapSizeX;\n            z = z - Math.floor((z - z0) / mapSizeZ) * mapSizeZ;\n            var col = Math.floor((x - x0) * mapSubX / mapSizeX);\n            var row = Math.floor((z - z0) * mapSubZ / mapSizeZ);\n            var quadIdx = row * mapSubX + col;\n\n            if (quads[quadIdx] === undefined) {\n              quads[quadIdx] = [];\n              quads[quadIdx][typeSPS] = [];\n            }\n\n            if (quads[quadIdx][typeSPS][t] === undefined) {\n              quads[quadIdx][typeSPS][t] = [];\n            }\n\n            var quad = quads[quadIdx][typeSPS][t];\n            quad.push(pIdx);\n          }\n        }\n\n        var sps = this._sps;\n        sps.computeBoundingBox = true;\n        sps.isAlwaysVisible = true;\n\n        if (this._colorSPData) {\n          sps.computeParticleColor = true;\n        }\n\n        if (this._uvSPData) {\n          sps.computeParticleTexture = true;\n        }\n\n        var spsTypeStartIndexes = [];\n        this._spsTypeStartIndexes = spsTypeStartIndexes;\n        var spsNbPerType = [];\n        this._spsNbPerType = spsNbPerType;\n        var nbParticles = sps.nbParticles;\n        var particles = sps.particles;\n        var type = 0;\n        spsTypeStartIndexes.push(type);\n        nbAvailableParticlesPerType.push(0);\n        var count = 1;\n\n        for (var p = 1; p < nbParticles; p++) {\n          particles[p].isVisible = false;\n\n          if (type != particles[p].shapeId) {\n            type++;\n            spsTypeStartIndexes.push(p);\n            spsNbPerType.push(count);\n            nbAvailableParticlesPerType.push(count);\n            count = 0;\n          }\n\n          count++;\n        }\n\n        spsNbPerType.push(count);\n      }\n\n      if (this._mapInstanceData) {\n        var x0 = mapData[0];\n        var z0 = mapData[2];\n        this._colorBuffers = [];\n        this._instanceWM = [];\n        var posVct = DynamicTerrain._pos;\n        var sclVct = DynamicTerrain._scl;\n        var mat = DynamicTerrain._mat;\n        var quat = DynamicTerrain._quat;\n        var composeToRef = DynamicTerrain._ComposeToRef;\n\n        for (var t = 0; t < instanceMapData.length; t++) {\n          var data = instanceMapData[t];\n          var nb = data.length / dataStride | 0;\n\n          if (this._precomputeInstances) {\n            this._instanceWM[t] = new Float32Array(nb * 16);\n            var instanceWM = this._instanceWM[t];\n          }\n\n          for (var pIdx = 0; pIdx < nb; pIdx++) {\n            var dIdx = pIdx * dataStride;\n            var x = data[dIdx];\n            var y_1 = data[dIdx + 1];\n            var z = data[dIdx + 2];\n\n            if (this._precomputeInstances) {\n              posVct.copyFromFloats(x, y_1, z);\n              var rx = data[dIdx + 3];\n              var ry = data[dIdx + 4];\n              var rz = data[dIdx + 5];\n              BABYLON.Quaternion.RotationYawPitchRollToRef(ry, rx, rz, quat);\n              sclVct.copyFromFloats(data[dIdx + 6], data[dIdx + 7], data[dIdx + 8]);\n              composeToRef(sclVct, quat, posVct, mat);\n              var wmIndex = 16 * pIdx;\n              instanceWM.set(mat, wmIndex);\n            }\n\n            x = x - Math.floor((x - x0) / mapSizeX) * mapSizeX;\n            z = z - Math.floor((z - z0) / mapSizeZ) * mapSizeZ;\n            var col = Math.floor((x - x0) * mapSubX / mapSizeX);\n            var row = Math.floor((z - z0) * mapSubZ / mapSizeZ);\n            var quadIdx = row * mapSubX + col;\n\n            if (quads[quadIdx] === undefined) {\n              quads[quadIdx] = [];\n              quads[quadIdx][typeInstance] = [];\n            }\n\n            if (quads[quadIdx][typeInstance] === undefined) {\n              quads[quadIdx][typeInstance] = [];\n            }\n\n            if (quads[quadIdx][typeInstance][t] === undefined) {\n              quads[quadIdx][typeInstance][t] = [];\n            }\n\n            var quad = quads[quadIdx][typeInstance][t];\n            quad.push(pIdx);\n          }\n        }\n\n        var nbAvailableInstancesPerType = [];\n        this._nbAvailableInstancesPerType = nbAvailableInstancesPerType;\n        var typeNb = this._sourceMeshes.length;\n\n        var engine = this._scene.getEngine();\n\n        for (var t = 0; t < typeNb; t++) {\n          var mesh = this._sourceMeshes[t];\n          mesh.alwaysSelectAsActiveMesh = true;\n          var nb = mesh.instances.length;\n          nbAvailableInstancesPerType[t] = nb;\n          mesh.manualUpdateOfWorldMatrixInstancedBuffer = true;\n\n          for (var i = 0; i < mesh.instances.length; i++) {\n            var instance = mesh.instances[i];\n            instance.freezeWorldMatrix();\n            instance.alwaysSelectAsActiveMesh = true;\n            instance.doNotSyncBoundingInfo = true;\n          }\n\n          if (this._colorInstanceData) {\n            var colorArray = new Float32Array(4 * (mesh.instances.length + 1));\n\n            for (var c = 0; c < colorArray.length; c++) {\n              colorArray[c] = 1;\n            }\n\n            var colorBuffer = new BABYLON.VertexBuffer(engine, colorArray, BABYLON.VertexBuffer.ColorKind, true, false, 4, true);\n            mesh.setVerticesBuffer(colorBuffer);\n\n            this._colorBuffers.push(colorBuffer);\n          }\n        }\n      }\n\n      this.update(true);\n    }\n\n    DynamicTerrain.prototype.update = function (force) {\n      var needsUpdate = false;\n      var updateLOD = false;\n      var updateForced = force ? true : false;\n      var terrainPosition = this._terrain.position;\n      var cameraPosition = this._terrainCamera.globalPosition;\n      var shiftFromCamera = this.shiftFromCamera;\n      var terrainHalfSizeX = this._terrainHalfSizeX;\n      var terrainHalfSizeZ = this._terrainHalfSizeZ;\n      var deltaX = terrainHalfSizeX + terrainPosition.x - cameraPosition.x - shiftFromCamera.x;\n      var deltaZ = terrainHalfSizeZ + terrainPosition.z - cameraPosition.z - shiftFromCamera.z;\n      var subToleranceX = this._subToleranceX;\n      var subToleranceZ = this._subToleranceZ;\n      var mod = this._mod;\n      var oldCorrection = this._cameraLODCorrection;\n      this._cameraLODCorrection = this.updateCameraLOD(this._terrainCamera) | 0;\n      updateLOD = oldCorrection == this._cameraLODCorrection ? false : true;\n      var LODValue = this._initialLOD + this._cameraLODCorrection;\n      LODValue = LODValue > 0 ? LODValue : 1;\n      this._LODValue = LODValue;\n      var mapShiftX = this._averageSubSizeX * subToleranceX * LODValue;\n      var mapShiftZ = this._averageSubSizeZ * subToleranceZ * LODValue;\n      var mapFlgtNb = 0 | 0;\n      var deltaSubX = this._deltaSubX;\n      var deltaSubZ = this._deltaSubZ;\n\n      if (Math.abs(deltaX) > mapShiftX) {\n        var signX = deltaX > 0 ? -1 : 1;\n        mapFlgtNb = Math.abs(deltaX / mapShiftX) | 0;\n        terrainPosition.x += mapShiftX * signX * mapFlgtNb;\n        deltaSubX += subToleranceX * signX * LODValue * mapFlgtNb;\n        needsUpdate = true;\n      }\n\n      if (Math.abs(deltaZ) > mapShiftZ) {\n        var signZ = deltaZ > 0 ? -1 : 1;\n        mapFlgtNb = Math.abs(deltaZ / mapShiftZ) | 0;\n        terrainPosition.z += mapShiftZ * signZ * mapFlgtNb;\n        deltaSubZ += subToleranceZ * signZ * LODValue * mapFlgtNb;\n        needsUpdate = true;\n      }\n\n      var updateSize = updateLOD || updateForced;\n\n      if (needsUpdate || updateSize) {\n        this._deltaSubX = mod(deltaSubX, this._mapSubX);\n        this._deltaSubZ = mod(deltaSubZ, this._mapSubZ);\n\n        this._updateTerrain(updateSize);\n      }\n\n      terrainHalfSizeX = this._terrainHalfSizeX;\n      terrainHalfSizeZ = this._terrainHalfSizeZ;\n      this.centerLocal.copyFromFloats(terrainHalfSizeX, 0, terrainHalfSizeZ);\n\n      this._centerWorld.copyFromFloats(terrainPosition.x + terrainHalfSizeX, terrainPosition.y, terrainPosition.z + terrainHalfSizeZ);\n\n      return this;\n    };\n\n    DynamicTerrain.prototype._updateTerrain = function (updateSize) {\n      var stepJ = 0 | 0;\n      var stepI = 0 | 0;\n      var LODLimitDown = 0 | 0;\n      var LODLimitUp = 0 | 0;\n      var LODValue = this._LODValue;\n      var axisLODValue = LODValue;\n      var lodI = LODValue;\n      var lodJ = LODValue;\n      var bbMin = DynamicTerrain._bbMin;\n      var bbMax = DynamicTerrain._bbMax;\n      var terrain = this._terrain;\n      var positions = this._positions;\n      var normals = this._normals;\n      var colors = this._colors;\n      var uvs = this._uvs;\n      var mapColors = this._mapColors;\n      var mapNormals = this._mapNormals;\n      var mapData = this._mapData;\n      var mapUVs = this._mapUVs;\n      var mapSPData = this._mapSPData;\n      var quads = this._mapQuads;\n      var nbPerType = this._spsNbPerType;\n      var SPmapData = this._SPmapData;\n      var SPcolorData = this._SPcolorData;\n      var SPuvData = this._SPuvData;\n      var mapInstanceData = this._mapInstanceData;\n      var instanceMapData = this._instanceMapData;\n      var instanceColorData = this._instanceColorData;\n      var dataStride = this._particleDataStride;\n      var colorStride = this._particleColorStride;\n      var uvStride = this._particleUVStride;\n      var LODLimits = this._LODLimits;\n      var terrainSub = this._terrainSub;\n      var mod = this._mod;\n      var terrainIdx = this._terrainIdx;\n      var mapSubX = this._mapSubX;\n      var mapSubZ = this._mapSubZ;\n      var deltaSubX = this._deltaSubX;\n      var deltaSubZ = this._deltaSubZ;\n      var datamap = this._datamap;\n      var uvmap = this._uvmap;\n      var colormap = this._colormap;\n      var useCustomVertexFunction = this._useCustomVertexFunction;\n      var updateVertex = this.updateVertex;\n      var dontComputeNormals = !this._computeNormals;\n      var LODpstvX = this._LODPositiveX;\n      var LODngtvX = this._LODNegativeX;\n      var LODpstvZ = this._LODPositiveZ;\n      var LODngtvZ = this._LODNegativeZ;\n      var mapSizeX = this._mapSizeX;\n      var mapSizeZ = this._mapSizeZ;\n      var averageSubSizeX = this._averageSubSizeX;\n      var averageSubSizeZ = this._averageSubSizeZ;\n      var particleMap = mapSPData && quads;\n      var particleColorMap = particleMap && this._colorSPData;\n      var particleUVMap = particleMap && this._uvSPData;\n      var typeSPS = this._typeSPS;\n      var typeInstance = this._typeInstance;\n      var instanceMap = mapInstanceData && quads;\n      var instanceColorMap = instanceMap && this._colorInstanceData;\n      var precomputeInstances = this._precomputeInstances;\n      var sourceMeshes = this._sourceMeshes;\n      var nbAvailableInstancesPerType = this._nbAvailableInstancesPerType;\n      var composeToRef = DynamicTerrain._ComposeToRef;\n      var copyArrayValuesFromToRef = DynamicTerrain._CopyArrayValuesFromToRef;\n      var instanceWM = this._instanceWM;\n      var sclVct = DynamicTerrain._scl;\n      var posVct = DynamicTerrain._pos;\n      var quat = DynamicTerrain._quat;\n      var matZero = DynamicTerrain._matZero;\n      var l = 0 | 0;\n      var index = 0 | 0;\n      var posIndex1 = 0 | 0;\n      var posIndex2 = 0 | 0;\n      var posIndex3 = 0 | 0;\n      var colIndex = 0 | 0;\n      var uvIndex = 0 | 0;\n      var terIndex = 0 | 0;\n      var ribbonInd = 0 | 0;\n      var ribbonPosInd = 0 | 0;\n      var ribbonUVInd = 0 | 0;\n      var ribbonColInd = 0 | 0;\n      var ribbonColInd1 = 0 | 0;\n      var ribbonColInd2 = 0 | 0;\n      var ribbonColInd3 = 0 | 0;\n      var ribbonColInd4 = 0 | 0;\n      var ribbonPosInd1 = 0 | 0;\n      var ribbonPosInd2 = 0 | 0;\n      var ribbonPosInd3 = 0 | 0;\n\n      if (updateSize) {\n        this.updateTerrainSize();\n      }\n\n      BABYLON.Vector3.FromFloatsToRef(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, bbMin);\n      BABYLON.Vector3.FromFloatsToRef(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE, bbMax);\n      var x0 = mapData[0];\n      var z0 = mapData[2];\n      var terrainPos = terrain.position;\n\n      if (particleMap) {\n        var sps = this._sps;\n        var particles = sps.particles;\n        var spsTypeStartIndexes = this._spsTypeStartIndexes;\n        var nbAvailableParticlesPerType = this._nbAvailableParticlesPerType;\n        var nbParticles = sps.nbParticles;\n\n        for (var p = 0; p < nbParticles; p++) {\n          particles[p].isVisible = false;\n        }\n      }\n\n      if (instanceMap) {\n        var mat = DynamicTerrain._mat;\n\n        for (var t = 0; t < sourceMeshes.length; t++) {\n          var sourceMesh = sourceMeshes[t];\n          var instancedBuffer = sourceMesh.worldMatrixInstancedBuffer;\n\n          if (instancedBuffer) {\n            var instances = sourceMesh.instances;\n            var offset = 0;\n\n            for (var i = 0; i < instances.length; i++) {\n              instancedBuffer.set(matZero, offset);\n              offset += 16;\n            }\n          }\n        }\n      }\n\n      var seamX = false;\n      var seamZ = false;\n      var seamXIndex = 0 | 0;\n      var seamZIndex = 0 | 0;\n      var prevXIndex = mod(deltaSubX, mapSubX);\n      var prevZIndex = mod(deltaSubZ, mapSubZ);\n      var axisZLODValue = 0 | 0;\n      var axisXLODValue = 0 | 0;\n      var curXIndex = 0 | 0;\n      var curZIndex = 0 | 0;\n      var positionsLength = positions.length;\n      var uvsLength = uvs.length;\n      var colorsLength = colors.length;\n\n      for (var j = 1 | 0; j <= terrainSub; j++) {\n        axisZLODValue = LODValue;\n        axisXLODValue = LODValue;\n\n        for (l = 0; l < LODLimits.length; l++) {\n          LODLimitDown = LODLimits[l];\n          LODLimitUp = terrainSub - LODLimitDown - 1;\n\n          if (LODngtvZ && j < LODLimitDown || LODpstvZ && j > LODLimitUp) {\n            axisZLODValue = l + 1 + LODValue;\n          }\n\n          if (LODngtvX && j < LODLimitDown || LODpstvX && j > LODLimitUp) {\n            axisXLODValue = l + 1 + LODValue;\n          }\n\n          lodJ = axisZLODValue;\n          lodI = axisXLODValue;\n        }\n\n        stepJ += lodJ;\n        stepI += lodI;\n\n        if (!seamX) {\n          curXIndex = mod(deltaSubX + stepI, mapSubX);\n\n          if (Math.abs(curXIndex - prevXIndex) > lodI) {\n            seamX = true;\n            seamXIndex = stepI;\n          } else {\n            prevXIndex = curXIndex;\n          }\n        }\n\n        if (!seamZ) {\n          curZIndex = mod(deltaSubZ + stepJ, mapSubZ);\n\n          if (Math.abs(curZIndex - prevZIndex) > lodJ) {\n            seamZ = true;\n            seamZIndex = stepJ;\n          } else {\n            prevZIndex = curZIndex;\n          }\n        }\n\n        if (seamZ && seamX) {\n          break;\n        }\n      }\n\n      stepI = 0 | 0;\n      stepJ = 0 | 0;\n      lodI = LODValue;\n      lodJ = LODValue;\n      var zIndex = 0 | 0;\n      var xIndex = 0 | 0;\n\n      for (var j = 0 | 0; j <= terrainSub; j++) {\n        axisLODValue = LODValue;\n\n        for (l = 0; l < LODLimits.length; l++) {\n          LODLimitDown = LODLimits[l];\n          LODLimitUp = terrainSub - LODLimitDown - 1;\n\n          if (LODngtvZ && j < LODLimitDown || LODpstvZ && j > LODLimitUp) {\n            axisLODValue = l + 1 + LODValue;\n          }\n\n          lodJ = axisLODValue;\n        }\n\n        zIndex = mod(deltaSubZ + stepJ, mapSubZ);\n\n        for (var i = 0 | 0; i <= terrainSub; i++) {\n          axisLODValue = LODValue;\n\n          for (l = 0; l < LODLimits.length; l++) {\n            LODLimitDown = LODLimits[l];\n            LODLimitUp = terrainSub - LODLimitDown - 1;\n\n            if (LODngtvX && i < LODLimitDown || LODpstvX && i > LODLimitUp) {\n              axisLODValue = l + 1 + LODValue;\n            }\n\n            lodI = axisLODValue;\n          }\n\n          xIndex = mod(deltaSubX + stepI, mapSubX);\n          index = zIndex * mapSubX + xIndex;\n          terIndex = mod(deltaSubZ + stepJ, terrainIdx) * terrainIdx + mod(deltaSubX + stepI, terrainIdx);\n\n          if (datamap) {\n            posIndex1 = 3 * index;\n          } else {\n            posIndex1 = 3 * terIndex;\n          }\n\n          if (uvmap) {\n            uvIndex = 2 * index;\n          } else {\n            uvIndex = 2 * terIndex;\n          }\n\n          if (colormap) {\n            colIndex = 3 * index;\n          } else {\n            colIndex = 3 * terIndex;\n          }\n\n          posIndex2 = posIndex1 + 1;\n          posIndex3 = posIndex1 + 2;\n          ribbonPosInd = 3 * ribbonInd;\n          ribbonColInd = 4 * ribbonInd;\n          ribbonUVInd = 2 * ribbonInd;\n          ribbonPosInd1 = ribbonPosInd;\n          ribbonPosInd2 = ribbonPosInd + 1;\n          ribbonPosInd3 = ribbonPosInd + 2;\n          ribbonColInd1 = ribbonColInd;\n          ribbonColInd2 = ribbonColInd + 1;\n          ribbonColInd3 = ribbonColInd + 2;\n          ribbonColInd4 = ribbonColInd + 3;\n          ribbonInd += 1;\n          positions[ribbonPosInd1] = averageSubSizeX * stepI;\n          positions[ribbonPosInd2] = mapData[posIndex2];\n          positions[ribbonPosInd3] = averageSubSizeZ * stepJ;\n\n          if (dontComputeNormals) {\n            normals[ribbonPosInd1] = mapNormals[posIndex1];\n            normals[ribbonPosInd2] = mapNormals[posIndex2];\n            normals[ribbonPosInd3] = mapNormals[posIndex3];\n          }\n\n          uvs[ribbonUVInd] = mapUVs[uvIndex];\n          uvs[ribbonUVInd + 1] = mapUVs[uvIndex + 1];\n\n          if (colormap) {\n            colors[ribbonColInd1] = mapColors[colIndex];\n            colors[ribbonColInd2] = mapColors[colIndex + 1];\n            colors[ribbonColInd3] = mapColors[colIndex + 2];\n          }\n\n          if (seamZ && (seamZIndex == stepJ || stepJ == seamZIndex + 1)) {\n            var back3 = 3 * terrainSub + 3;\n            var ind1 = mod(ribbonPosInd1 - back3, positionsLength);\n            var ind2 = ind1 + 1;\n            var ind3 = ind1 + 2;\n            positions[ribbonPosInd1] = positions[ind1];\n            positions[ribbonPosInd2] = positions[ind2];\n            positions[ribbonPosInd3] = positions[ind3];\n\n            if (dontComputeNormals) {\n              normals[ribbonPosInd1] = normals[ind1];\n              normals[ribbonPosInd2] = normals[ind2];\n              normals[ribbonPosInd3] = normals[ind3];\n            }\n\n            var back2 = 2 * terrainSub + 2;\n            var back4 = 2 * back2;\n\n            if (stepJ == seamZIndex + 1) {\n              var induv = mod(ribbonUVInd - back2, uvsLength);\n              uvs[ribbonUVInd] = uvs[induv];\n              uvs[ribbonUVInd + 1] = uvs[induv + 1];\n\n              if (colormap) {\n                var indcol = mod(ribbonColInd - back4, colorsLength);\n                colors[ribbonColInd1] = colors[indcol];\n                colors[ribbonColInd2] = colors[indcol + 1];\n                colors[ribbonColInd3] = colors[indcol + 2];\n              }\n            }\n          }\n\n          if (seamX && (seamXIndex == stepI || stepI == seamXIndex + 1)) {\n            var back3 = 3;\n            var ind1 = mod(ribbonPosInd1 - back3, positionsLength);\n            var ind2 = ind1 + 1;\n            var ind3 = ind1 + 2;\n            positions[ribbonPosInd1] = positions[ind1];\n            positions[ribbonPosInd2] = positions[ind2];\n            positions[ribbonPosInd3] = positions[ind3];\n\n            if (dontComputeNormals) {\n              normals[ribbonPosInd1] = normals[ind1];\n              normals[ribbonPosInd2] = normals[ind2];\n              normals[ribbonPosInd3] = normals[ind3];\n            }\n\n            var back2 = 2;\n            var back4 = 4;\n\n            if (stepI == seamXIndex + 1) {\n              var induv = mod(ribbonUVInd - back2, uvsLength);\n              uvs[ribbonUVInd] = uvs[induv];\n              uvs[ribbonUVInd + 1] = uvs[induv + 1];\n\n              if (colormap) {\n                var indcol = mod(ribbonColInd - back4, colorsLength);\n                colors[ribbonColInd1] = colors[indcol];\n                colors[ribbonColInd2] = colors[indcol + 1];\n                colors[ribbonColInd3] = colors[indcol + 2];\n              }\n            }\n          }\n\n          if (positions[ribbonPosInd1] < bbMin.x) {\n            bbMin.x = positions[ribbonPosInd1];\n          }\n\n          if (positions[ribbonPosInd1] > bbMax.x) {\n            bbMax.x = positions[ribbonPosInd1];\n          }\n\n          if (positions[ribbonPosInd2] < bbMin.y) {\n            bbMin.y = positions[ribbonPosInd2];\n          }\n\n          if (positions[ribbonPosInd2] > bbMax.y) {\n            bbMax.y = positions[ribbonPosInd2];\n          }\n\n          if (positions[ribbonPosInd3] < bbMin.z) {\n            bbMin.z = positions[ribbonPosInd3];\n          }\n\n          if (positions[ribbonPosInd3] > bbMax.z) {\n            bbMax.z = positions[ribbonPosInd3];\n          }\n\n          if (useCustomVertexFunction) {\n            var vertex = DynamicTerrain._vertex;\n            var vertexPosition = vertex.position;\n            var vertexWorldPosition = vertex.worldPosition;\n            var vertexColor = vertex.color;\n            var vertexUvs = vertex.uvs;\n            vertexPosition.copyFromFloats(positions[ribbonPosInd1], positions[ribbonPosInd2], positions[ribbonPosInd3]);\n            vertexWorldPosition.copyFromFloats(mapData[posIndex1], vertexPosition.y, mapData[posIndex3]);\n            vertex.lodX = lodI;\n            vertex.lodZ = lodJ;\n            vertexColor.copyFromFloats(colors[ribbonColInd1], colors[ribbonColInd2], colors[ribbonColInd3], colors[ribbonColInd4]);\n            vertexUvs.copyFromFloats(uvs[ribbonUVInd], uvs[ribbonUVInd + 1]);\n            vertex.mapIndex = index;\n            updateVertex(vertex, i, j);\n            colors[ribbonColInd1] = vertexColor.r;\n            colors[ribbonColInd2] = vertexColor.g;\n            colors[ribbonColInd3] = vertexColor.b;\n            colors[ribbonColInd4] = vertexColor.a;\n            uvs[ribbonUVInd] = vertexUvs.x;\n            uvs[ribbonUVInd + 1] = vertexUvs.y;\n            positions[ribbonPosInd1] = vertexPosition.x;\n            positions[ribbonPosInd2] = vertexPosition.y;\n            positions[ribbonPosInd3] = vertexPosition.z;\n          }\n\n          if (particleMap) {\n            if (quads[index]) {\n              var quad = quads[index][typeSPS];\n\n              for (var t = 0; t < quad.length; t++) {\n                var data = SPmapData[t];\n                var partIndexes = quad[t];\n\n                if (particleColorMap) {\n                  var sp_colorData = SPcolorData[t];\n                }\n\n                if (particleUVMap) {\n                  var sp_uvData = SPuvData[t];\n                }\n\n                if (partIndexes) {\n                  var typeStartIndex = spsTypeStartIndexes[t];\n                  var nbQuadParticles = partIndexes.length;\n                  var nbInSPS = nbPerType[t];\n                  var available = nbAvailableParticlesPerType[t];\n                  var rem = nbInSPS - available;\n                  var used = rem > 0 ? rem : 0;\n                  var min = available < nbQuadParticles ? available : nbQuadParticles;\n\n                  for (var pIdx = 0; pIdx < min; pIdx++) {\n                    var px = partIndexes[pIdx];\n                    var idm = px * dataStride;\n                    var particle = particles[typeStartIndex + pIdx + used];\n                    var pos = particle.position;\n                    var rot = particle.rotation;\n                    var scl = particle.scaling;\n                    var x = data[idm];\n                    pos.x = x + Math.floor((terrainPos.x - x - x0) / mapSizeX) * mapSizeX;\n                    pos.y = data[idm + 1];\n                    var z = data[idm + 2];\n                    pos.z = z + Math.floor((terrainPos.z - z - z0) / mapSizeZ) * mapSizeZ;\n                    rot.x = data[idm + 3];\n                    rot.y = data[idm + 4];\n                    rot.z = data[idm + 5];\n                    scl.x = data[idm + 6];\n                    scl.y = data[idm + 7];\n                    scl.z = data[idm + 8];\n\n                    if (particleColorMap) {\n                      var idc = px * colorStride;\n                      var col = particle.color;\n                      col.r = sp_colorData[idc];\n                      col.g = sp_colorData[idc + 1];\n                      col.b = sp_colorData[idc + 2];\n                      col.a = sp_colorData[idc + 3];\n                    }\n\n                    if (particleUVMap) {\n                      var iduv = px * uvStride;\n                      var uvs_1 = particle.uvs;\n                      uvs_1.x = sp_uvData[iduv];\n                      uvs_1.y = sp_uvData[iduv + 1];\n                      uvs_1.z = sp_uvData[iduv + 2];\n                      uvs_1.w = sp_uvData[iduv + 3];\n                    }\n\n                    particle.isVisible = true;\n                    available = available - 1;\n                    used = used + 1;\n                    min = available < nbQuadParticles ? available : nbQuadParticles;\n                  }\n\n                  available = available > 0 ? available : 0;\n                  nbAvailableParticlesPerType[t] = available;\n                }\n              }\n            }\n          }\n\n          if (instanceMap) {\n            if (quads[index]) {\n              var quad = quads[index][typeInstance];\n              var colorBuffers = this._colorBuffers;\n              var tmpCol = DynamicTerrain._col;\n\n              for (var t = 0; t < quad.length; t++) {\n                var sourceMesh = this._sourceMeshes[t];\n                var instances = sourceMesh.instances;\n                var instancedBuffer = sourceMesh.worldMatrixInstancedBuffer;\n                var data = instanceMapData[t];\n                var instanceIndexes = quad[t];\n                var instWM = instanceWM[t];\n\n                if (instanceColorMap) {\n                  var instance_colorData = instanceColorData[t];\n                  var colorBuffer = colorBuffers[t];\n                }\n\n                if (instanceIndexes && instancedBuffer) {\n                  var nbQuadInstances = instanceIndexes.length;\n                  var nbInstances = instances.length;\n                  var available = nbAvailableInstancesPerType[t];\n                  var rem = nbInstances - available;\n                  var used = rem > 0 ? rem : 0;\n                  var min = available < nbQuadInstances ? available : nbQuadInstances;\n\n                  for (var iIdx = 0; iIdx < min; iIdx++) {\n                    var ix = instanceIndexes[iIdx];\n                    var idm = ix * dataStride;\n                    var nextFree = iIdx + used;\n                    var bufferIndex = nextFree * 16;\n\n                    if (precomputeInstances) {\n                      copyArrayValuesFromToRef(instWM, ix * 16, 16, mat);\n                    } else {\n                      var x = data[idm];\n                      var y = data[idm + 1];\n                      var z = data[idm + 2];\n                      x = x + Math.floor((terrainPos.x - x - x0) / mapSizeX) * mapSizeX;\n                      z = z + Math.floor((terrainPos.z - z - z0) / mapSizeZ) * mapSizeZ;\n                      posVct.copyFromFloats(x, y, z);\n                      x = data[idm + 3];\n                      y = data[idm + 4];\n                      z = data[idm + 5];\n                      BABYLON.Quaternion.RotationYawPitchRollToRef(y, x, z, quat);\n                      sclVct.copyFromFloats(data[idm + 6], data[idm + 7], data[idm + 8]);\n                      composeToRef(sclVct, quat, posVct, mat);\n                    }\n\n                    instancedBuffer.set(mat, bufferIndex);\n\n                    if (instanceColorData) {\n                      var idc = ix * colorStride;\n                      var colorBufferIndex = nextFree * 4;\n                      tmpCol[0] = instance_colorData[idc];\n                      tmpCol[1] = instance_colorData[idc + 1];\n                      tmpCol[2] = instance_colorData[idc + 2];\n                      tmpCol[3] = instance_colorData[idc + 3];\n                      colorBuffer.updateDirectly(tmpCol, colorBufferIndex);\n                    }\n\n                    available = available - 1;\n                    used = used + 1;\n                    min = available < nbQuadInstances ? available : nbQuadInstances;\n                  }\n\n                  available = available > 0 ? available : 0;\n                  this._nbAvailableInstancesPerType[t] = available;\n                }\n              }\n            }\n          }\n\n          stepI += lodI;\n        }\n\n        if (seamX && seamXIndex + 1 == stepI) {\n          seamX = false;\n        }\n\n        if (seamZ && seamZIndex + 1 == stepJ) {\n          seamZ = false;\n        }\n\n        stepJ += lodJ;\n        stepI = 0;\n      }\n\n      if (particleMap) {\n        sps.setParticles();\n\n        for (var c = 0; c < nbAvailableParticlesPerType.length; c++) {\n          nbAvailableParticlesPerType[c] = nbPerType[c];\n        }\n      }\n\n      if (instanceMap && nbAvailableInstancesPerType) {\n        for (var c = 0; c < nbAvailableInstancesPerType.length; c++) {\n          nbAvailableInstancesPerType[c] = this._sourceMeshes[c].instances.length;\n        }\n      }\n\n      terrain.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions, false, false);\n\n      if (this._computeNormals) {\n        BABYLON.VertexData.ComputeNormals(positions, this._indices, normals);\n      }\n\n      terrain.updateVerticesData(BABYLON.VertexBuffer.NormalKind, normals, false, false);\n      terrain.updateVerticesData(BABYLON.VertexBuffer.UVKind, uvs, false, false);\n      terrain.updateVerticesData(BABYLON.VertexBuffer.ColorKind, colors, false, false);\n\n      terrain._boundingInfo.reConstruct(bbMin, bbMax, terrain._worldMatrix);\n    };\n\n    DynamicTerrain.prototype._mod = function (a, b) {\n      return (a % b + b) % b;\n    };\n\n    DynamicTerrain.prototype.updateTerrainSize = function () {\n      var remainder = this._terrainSub;\n      var nb = 0 | 0;\n      var next = 0 | 0;\n      var LODValue = this._LODValue;\n      var lod = LODValue + 1;\n      var tsx = 0;\n      var tsz = 0;\n      var LODLimits = this._LODLimits;\n      var averageSubSizeX = this._averageSubSizeX;\n      var averageSubSizeZ = this._averageSubSizeZ;\n\n      for (var l = 0 | 0; l < LODLimits.length; l++) {\n        lod = LODValue + l + 1;\n        next = l >= LODLimits.length - 1 ? 0 : LODLimits[l + 1];\n        nb = 2 * (LODLimits[l] - next);\n        tsx += averageSubSizeX * lod * nb;\n        tsz += averageSubSizeZ * lod * nb;\n        remainder -= nb;\n      }\n\n      tsx += remainder * averageSubSizeX * LODValue;\n      tsz += remainder * averageSubSizeZ * LODValue;\n      this._terrainSizeX = tsx;\n      this._terrainSizeZ = tsz;\n      this._terrainHalfSizeX = tsx * .5;\n      this._terrainHalfSizeZ = tsz * .5;\n      return this;\n    };\n\n    DynamicTerrain.prototype.getHeightFromMap = function (x, z, options) {\n      return DynamicTerrain._GetHeightFromMap(x, z, this._mapData, this._mapSubX, this._mapSubZ, this._mapSizeX, this._mapSizeZ, options, this._inverted);\n    };\n\n    DynamicTerrain.GetHeightFromMap = function (x, z, mapData, mapSubX, mapSubZ, options, inverted) {\n      var mapSizeX = Math.abs(mapData[(mapSubX - 1) * 3] - mapData[0]);\n      var mapSizeZ = Math.abs(mapData[(mapSubZ - 1) * mapSubX * 3 + 2] - mapData[2]);\n      return DynamicTerrain._GetHeightFromMap(x, z, mapData, mapSubX, mapSubZ, mapSizeX, mapSizeZ, options, inverted);\n    };\n\n    DynamicTerrain._GetHeightFromMap = function (x, z, mapData, mapSubX, mapSubZ, mapSizeX, mapSizeZ, options, inverted) {\n      var x0 = mapData[0];\n      var z0 = mapData[2];\n      x = x - Math.floor((x - x0) / mapSizeX) * mapSizeX;\n      z = z - Math.floor((z - z0) / mapSizeZ) * mapSizeZ;\n      var col1 = Math.floor((x - x0) * mapSubX / mapSizeX);\n      var row1 = Math.floor((z - z0) * mapSubZ / mapSizeZ);\n      var col2 = (col1 + 1) % mapSubX;\n      var row2 = (row1 + 1) % mapSubZ;\n      var idx1 = 3 * (row1 * mapSubX + col1);\n      var idx2 = 3 * (row1 * mapSubX + col2);\n      var idx3 = 3 * (row2 * mapSubX + col1);\n      var idx4 = 3 * (row2 * mapSubX + col2);\n      var v1 = DynamicTerrain._v1;\n      var v2 = DynamicTerrain._v2;\n      var v3 = DynamicTerrain._v3;\n      var v4 = DynamicTerrain._v4;\n      v1.copyFromFloats(mapData[idx1], mapData[idx1 + 1], mapData[idx1 + 2]);\n      v2.copyFromFloats(mapData[idx2], mapData[idx2 + 1], mapData[idx2 + 2]);\n      v3.copyFromFloats(mapData[idx3], mapData[idx3 + 1], mapData[idx3 + 2]);\n      v4.copyFromFloats(mapData[idx4], mapData[idx4 + 1], mapData[idx4 + 2]);\n      var vAvB = DynamicTerrain._vAvB;\n      var vAvC = DynamicTerrain._vAvC;\n      var norm = DynamicTerrain._norm;\n      var vA = v1;\n      var vB;\n      var vC;\n      var v;\n      var xv4v1 = v4.x - v1.x;\n      var zv4v1 = v4.z - v1.z;\n\n      if (xv4v1 == 0 || zv4v1 == 0) {\n        return v1.y;\n      }\n\n      var cd = zv4v1 / xv4v1;\n      var h = v1.z - cd * v1.x;\n\n      if (z < cd * x + h) {\n        vB = v4;\n        vC = v2;\n        v = vA;\n      } else {\n        vB = v3;\n        vC = v4;\n        v = vB;\n      }\n\n      vB.subtractToRef(vA, vAvB);\n      vC.subtractToRef(vA, vAvC);\n      BABYLON.Vector3.CrossToRef(vAvB, vAvC, norm);\n      norm.normalize();\n\n      if (inverted) {\n        norm.scaleInPlace(-1);\n      }\n\n      if (options && options.normal) {\n        options.normal.copyFrom(norm);\n      }\n\n      var d = -(norm.x * v.x + norm.y * v.y + norm.z * v.z);\n      var y = v.y;\n\n      if (norm.y != 0) {\n        y = -(norm.x * x + norm.z * z + d) / norm.y;\n      }\n\n      return y;\n    };\n\n    DynamicTerrain.ComputeNormalsFromMapToRef = function (mapData, mapSubX, mapSubZ, normals, inverted) {\n      var mapIndices = [];\n      var tmp1 = {\n        normal: BABYLON.Vector3.Zero()\n      };\n      var tmp2 = {\n        normal: BABYLON.Vector3.Zero()\n      };\n      var normal1 = tmp1.normal;\n      var normal2 = tmp2.normal;\n      var l = mapSubX * (mapSubZ - 1);\n      var i = 0;\n\n      for (i = 0; i < l; i++) {\n        mapIndices.push(i + 1, i + mapSubX, i);\n        mapIndices.push(i + mapSubX, i + 1, i + mapSubX + 1);\n      }\n\n      BABYLON.VertexData.ComputeNormals(mapData, mapIndices, normals);\n      var lastIdx = (mapSubX - 1) * 3;\n      var colStart = 0;\n      var colEnd = 0;\n      var getHeightFromMap = DynamicTerrain.GetHeightFromMap;\n\n      for (i = 0; i < mapSubZ; i++) {\n        colStart = i * mapSubX * 3;\n        colEnd = colStart + lastIdx;\n        getHeightFromMap(mapData[colStart], mapData[colStart + 2], mapData, mapSubX, mapSubZ, tmp1);\n        getHeightFromMap(mapData[colEnd], mapData[colEnd + 2], mapData, mapSubX, mapSubZ, tmp2);\n        normal1.addInPlace(normal2).scaleInPlace(.5);\n        normals[colStart] = normal1.x;\n        normals[colStart + 1] = normal1.y;\n        normals[colStart + 2] = normal1.z;\n        normals[colEnd] = normal1.x;\n        normals[colEnd + 1] = normal1.y;\n        normals[colEnd + 2] = normal1.z;\n      }\n\n      if (inverted) {\n        for (i = 0; i < normals.length; i++) {\n          normals[i] = -normals[i];\n        }\n      }\n    };\n\n    DynamicTerrain.prototype.computeNormalsFromMap = function () {\n      DynamicTerrain.ComputeNormalsFromMapToRef(this._mapData, this._mapSubX, this._mapSubZ, this._mapNormals, this._inverted);\n      return this;\n    };\n\n    DynamicTerrain.prototype.contains = function (x, z) {\n      var positions = this._positions;\n      var meshPosition = this.mesh.position;\n      var terrainIdx = this._terrainIdx;\n\n      if (x < positions[0] + meshPosition.x || x > positions[3 * terrainIdx] + meshPosition.x) {\n        return false;\n      }\n\n      if (z < positions[2] + meshPosition.z || z > positions[3 * terrainIdx * terrainIdx + 2] + meshPosition.z) {\n        return false;\n      }\n\n      return true;\n    };\n\n    DynamicTerrain.CreateMapFromHeightMap = function (heightmapURL, options, scene) {\n      var subX = options.subX || 100;\n      var subZ = options.subZ || 100;\n      var data = new Float32Array(subX * subZ * 3);\n      DynamicTerrain.CreateMapFromHeightMapToRef(heightmapURL, options, data, scene);\n      return data;\n    };\n\n    DynamicTerrain.CreateMapFromHeightMapToRef = function (heightmapURL, options, data, scene) {\n      var width = options.width || 300;\n      var height = options.height || 300;\n      var subX = options.subX || 100;\n      var subZ = options.subZ || 100;\n      var minHeight = options.minHeight || 0;\n      var maxHeight = options.maxHeight || 10;\n      var offsetX = options.offsetX || 0;\n      var offsetZ = options.offsetZ || 0;\n      var filter = options.colorFilter || new BABYLON.Color3(.3, .59, .11);\n      var onReady = options.onReady;\n\n      var onload = function (img) {\n        var canvas = document.createElement(\"canvas\");\n        var context = canvas.getContext(\"2d\");\n        var bufferWidth = img.width;\n        var bufferHeight = img.height;\n        canvas.width = bufferWidth;\n        canvas.height = bufferHeight;\n        context.drawImage(img, 0, 0);\n        var buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n        var x = 0;\n        var y = 0;\n        var z = 0;\n\n        for (var row = 0; row < subZ; row++) {\n          for (var col = 0; col < subX; col++) {\n            x = col * width / subX - width * .5;\n            z = row * height / subZ - height * .5;\n            var heightmapX = (x + width * .5) / width * (bufferWidth - 1) | 0;\n            var heightmapY = bufferHeight - 1 - (z + height * .5) / height * (bufferHeight - 1) | 0;\n            var pos = (heightmapX + heightmapY * bufferWidth) * 4;\n            var gradient = (buffer[pos] * filter.r + buffer[pos + 1] * filter.g + buffer[pos + 2] * filter.b) / 255;\n            y = minHeight + (maxHeight - minHeight) * gradient;\n            var idx = (row * subX + col) * 3;\n            data[idx] = x + offsetX;\n            data[idx + 1] = y;\n            data[idx + 2] = z + offsetZ;\n          }\n        }\n\n        if (onReady) {\n          onReady(data, subX, subZ);\n        }\n      };\n\n      BABYLON.Tools.LoadImage(heightmapURL, onload, function () {}, scene.offlineProvider);\n    };\n\n    DynamicTerrain.CreateUVMapToRef = function (subX, subZ, mapUVs) {\n      for (var h = 0; h < subZ; h++) {\n        for (var w = 0; w < subX; w++) {\n          mapUVs[(h * subX + w) * 2] = w / (subX - 1);\n          mapUVs[(h * subX + w) * 2 + 1] = h / (subZ - 1);\n        }\n      }\n    };\n\n    DynamicTerrain.CreateUVMap = function (subX, subZ) {\n      var mapUVs = new Float32Array(subX * subZ * 2);\n      DynamicTerrain.CreateUVMapToRef(subX, subZ, mapUVs);\n      return mapUVs;\n    };\n\n    DynamicTerrain.prototype.createUVMap = function () {\n      this.mapUVs = DynamicTerrain.CreateUVMap(this._mapSubX, this._mapSubZ);\n      return this;\n    };\n\n    DynamicTerrain._ComposeToRef = function (scale, rotation, translation, m) {\n      var x = rotation.x,\n          y = rotation.y,\n          z = rotation.z,\n          w = rotation.w;\n      var x2 = x + x,\n          y2 = y + y,\n          z2 = z + z;\n      var xx = x * x2,\n          xy = x * y2,\n          xz = x * z2;\n      var yy = y * y2,\n          yz = y * z2,\n          zz = z * z2;\n      var wx = w * x2,\n          wy = w * y2,\n          wz = w * z2;\n      var sx = scale.x,\n          sy = scale.y,\n          sz = scale.z;\n      m[0] = (1 - (yy + zz)) * sx;\n      m[1] = (xy + wz) * sx;\n      m[2] = (xz - wy) * sx;\n      m[3] = 0;\n      m[4] = (xy - wz) * sy;\n      m[5] = (1 - (xx + zz)) * sy;\n      m[6] = (yz + wx) * sy;\n      m[7] = 0;\n      m[8] = (xz + wy) * sz;\n      m[9] = (yz - wx) * sz;\n      m[10] = (1 - (xx + yy)) * sz;\n      m[11] = 0;\n      m[12] = translation.x;\n      m[13] = translation.y;\n      m[14] = translation.z;\n      m[15] = 1;\n    };\n\n    DynamicTerrain._CopyArrayValuesFromToRef = function (source, start, nb, target) {\n      for (var i = 0; i < nb; i++) {\n        target[i] = source[start + i];\n      }\n    };\n\n    Object.defineProperty(DynamicTerrain.prototype, \"refreshEveryFrame\", {\n      get: function () {\n        return this._refreshEveryFrame;\n      },\n      set: function (val) {\n        this._refreshEveryFrame = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mesh\", {\n      get: function () {\n        return this._terrain;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"camera\", {\n      get: function () {\n        return this._terrainCamera;\n      },\n      set: function (val) {\n        this._terrainCamera = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"subToleranceX\", {\n      get: function () {\n        return this._subToleranceX;\n      },\n      set: function (val) {\n        this._subToleranceX = val > 0 ? val : 1;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"subToleranceZ\", {\n      get: function () {\n        return this._subToleranceZ;\n      },\n      set: function (val) {\n        this._subToleranceZ = val > 0 ? val : 1;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"initialLOD\", {\n      get: function () {\n        return this._initialLOD;\n      },\n      set: function (val) {\n        this._initialLOD = val > 0 ? val : 1;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODValue\", {\n      get: function () {\n        return this._LODValue;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"cameraLODCorrection\", {\n      get: function () {\n        return this._cameraLODCorrection;\n      },\n      set: function (val) {\n        this._cameraLODCorrection = val >= 0 ? val : 0;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODPositiveX\", {\n      get: function () {\n        return this._LODPositiveX;\n      },\n      set: function (val) {\n        this._LODPositiveX = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODNegativeX\", {\n      get: function () {\n        return this._LODNegativeX;\n      },\n      set: function (val) {\n        this._LODNegativeX = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODPositiveZ\", {\n      get: function () {\n        return this._LODPositiveZ;\n      },\n      set: function (val) {\n        this._LODPositiveZ = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODNegativeZ\", {\n      get: function () {\n        return this._LODNegativeZ;\n      },\n      set: function (val) {\n        this._LODNegativeZ = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"averageSubSizeX\", {\n      get: function () {\n        return this._averageSubSizeX;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"averageSubSizeZ\", {\n      get: function () {\n        return this._averageSubSizeZ;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"terrainSizeX\", {\n      get: function () {\n        return this._terrainSizeX;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"terrainHalfSizeX\", {\n      get: function () {\n        return this._terrainHalfSizeX;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"terrainSizeZ\", {\n      get: function () {\n        return this._terrainSizeZ;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"terrainHalfSizeZ\", {\n      get: function () {\n        return this._terrainHalfSizeZ;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"centerLocal\", {\n      get: function () {\n        return this._centerLocal;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"centerWorld\", {\n      get: function () {\n        return this._centerWorld;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"LODLimits\", {\n      get: function () {\n        return this._LODLimits;\n      },\n      set: function (ar) {\n        ar.sort(function (a, b) {\n          return b - a;\n        });\n        this._LODLimits = ar;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapData\", {\n      get: function () {\n        return this._mapData;\n      },\n      set: function (val) {\n        this._mapData = val;\n        this._datamap = true;\n        var mapSubX = this._mapSubX;\n        var mapSubZ = this._mapSubZ;\n        this._mapSizeX = Math.abs(val[(mapSubX - 1) * 3] - val[0]);\n        this._mapSizeZ = Math.abs(val[(mapSubZ - 1) * mapSubX * 3 + 2] - val[2]);\n        this._averageSubSizeX = this._mapSizeX / mapSubX;\n        this._averageSubSizeZ = this._mapSizeZ / mapSubZ;\n\n        if (this._precomputeNormalsFromMap) {\n          this.computeNormalsFromMap();\n        }\n\n        this.update(true);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapSubX\", {\n      get: function () {\n        return this._mapSubX;\n      },\n      set: function (val) {\n        this._mapSubX = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapSubZ\", {\n      get: function () {\n        return this._mapSubZ;\n      },\n      set: function (val) {\n        this._mapSubZ = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapColors\", {\n      get: function () {\n        return this._mapColors;\n      },\n      set: function (val) {\n        this._colormap = true;\n        this._mapColors = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapUVs\", {\n      get: function () {\n        return this._mapUVs;\n      },\n      set: function (val) {\n        this._uvmap = true;\n        this._mapUVs = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"mapNormals\", {\n      get: function () {\n        return this._mapNormals;\n      },\n      set: function (val) {\n        this._mapNormals = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"computeNormals\", {\n      get: function () {\n        return this._computeNormals;\n      },\n      set: function (val) {\n        this._computeNormals = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"useCustomVertexFunction\", {\n      get: function () {\n        return this._useCustomVertexFunction;\n      },\n      set: function (val) {\n        this._useCustomVertexFunction = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"isAlwaysVisible\", {\n      get: function () {\n        return this._isAlwaysVisible;\n      },\n      set: function (val) {\n        this.mesh.alwaysSelectAsActiveMesh = val;\n        this._isAlwaysVisible = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(DynamicTerrain.prototype, \"precomputeNormalsFromMap\", {\n      get: function () {\n        return this._precomputeNormalsFromMap;\n      },\n      set: function (val) {\n        this._precomputeNormalsFromMap = val;\n      },\n      enumerable: true,\n      configurable: true\n    });\n\n    DynamicTerrain.prototype.updateVertex = function (vertex, i, j) {\n      return;\n    };\n\n    DynamicTerrain.prototype.updateCameraLOD = function (terrainCamera) {\n      var camLOD = 0;\n      return camLOD;\n    };\n\n    DynamicTerrain.prototype.beforeUpdate = function (refreshEveryFrame) {\n      return;\n    };\n\n    DynamicTerrain.prototype.afterUpdate = function (refreshEveryFrame) {\n      return;\n    };\n\n    DynamicTerrain._vertex = {\n      position: BABYLON.Vector3.Zero(),\n      uvs: BABYLON.Vector2.Zero(),\n      color: new BABYLON.Color4(1, 1, 1, 1),\n      lodX: 1 | 0,\n      lodZ: 1 | 0,\n      worldPosition: BABYLON.Vector3.Zero(),\n      mapIndex: 0 | 0\n    };\n    DynamicTerrain._v1 = BABYLON.Vector3.Zero();\n    DynamicTerrain._v2 = BABYLON.Vector3.Zero();\n    DynamicTerrain._v3 = BABYLON.Vector3.Zero();\n    DynamicTerrain._v4 = BABYLON.Vector3.Zero();\n    DynamicTerrain._vAvB = BABYLON.Vector3.Zero();\n    DynamicTerrain._vAvC = BABYLON.Vector3.Zero();\n    DynamicTerrain._norm = BABYLON.Vector3.Zero();\n    DynamicTerrain._bbMin = BABYLON.Vector3.Zero();\n    DynamicTerrain._bbMax = BABYLON.Vector3.Zero();\n    DynamicTerrain._pos = BABYLON.Vector3.Zero();\n    DynamicTerrain._scl = BABYLON.Vector3.Zero();\n    DynamicTerrain._quat = BABYLON.Quaternion.Identity();\n    DynamicTerrain._mat = new Float32Array(16);\n    DynamicTerrain._matZero = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);\n    DynamicTerrain._col = new Float32Array(4);\n    return DynamicTerrain;\n  }();\n\n  BABYLON.DynamicTerrain = DynamicTerrain;\n})(BABYLON || (BABYLON = {}));","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/public/js/vendor/babylon.dynamicTerrain.min.js"],"names":["BABYLON","DynamicTerrain","name","options","scene","_this","_particleDataStride","_particleColorStride","_particleUVStride","_typeSPS","_typeInstance","_subToleranceX","_subToleranceZ","_LODLimits","_initialLOD","_LODValue","_cameraLODCorrection","_LODPositiveX","_LODNegativeX","_LODPositiveZ","_LODNegativeZ","_inverted","shiftFromCamera","x","z","_deltaSubX","_deltaSubZ","_refreshEveryFrame","_useCustomVertexFunction","_computeNormals","_datamap","_uvmap","_colormap","_mapSPData","_colorSPData","_uvSPData","_mapInstanceData","_colorInstanceData","_precomputeInstances","_averageSubSizeX","_averageSubSizeZ","_terrainSizeX","_terrainSizeZ","_terrainHalfSizeX","_terrainHalfSizeZ","_centerWorld","Vector3","Zero","_centerLocal","_mapSizeX","_mapSizeZ","_isAlwaysVisible","_precomputeNormalsFromMap","_terrainSub","terrainSub","_mapData","mapData","_terrainIdx","_mapSubX","mapSubX","_mapSubZ","mapSubZ","_mapUVs","mapUVs","_mapColors","mapColors","_scene","_terrainCamera","camera","activeCamera","invertSide","_SPmapData","SPmapData","_SPcolorData","SPcolorData","_SPuvData","SPuvData","_sps","sps","_instanceMapData","instanceMapData","_instanceColorData","instanceColorData","_sourceMeshes","sourceMeshes","precomputeInstances","Float32Array","_mapNormals","mapNormals","_mapQuads","index","posIndex","colIndex","uvIndex","color","uv","terIndex","y","terrainPath","u","v","lg","terrainData","terrainColor","terrainUV","nbAvailableParticlesPerType","_nbAvailableParticlesPerType","j","i","_mod","push","Color4","Vector2","Math","abs","ribbonOptions","pathArray","sideOrientation","Mesh","FRONTSIDE","BACKSIDE","colors","uvs","updatable","_terrain","MeshBuilder","CreateRibbon","_indices","getIndices","_positions","getVerticesData","VertexBuffer","PositionKind","_normals","NormalKind","_uvs","UVKind","_colors","ColorKind","computeNormalsFromMap","update","position","globalPosition","deltaNbSubX","deltaNbSubZ","floor","ceil","onBeforeRenderObservable","add","refreshEveryFrame","beforeUpdate","afterUpdate","dataStride","typeSPS","typeInstance","mapSizeX","mapSizeZ","quads","x0","z0","t","length","data","nb","pIdx","dIdx","col","row","quadIdx","undefined","quad","computeBoundingBox","isAlwaysVisible","computeParticleColor","computeParticleTexture","spsTypeStartIndexes","_spsTypeStartIndexes","spsNbPerType","_spsNbPerType","nbParticles","particles","type","count","p","isVisible","shapeId","_colorBuffers","_instanceWM","posVct","_pos","sclVct","_scl","mat","_mat","quat","_quat","composeToRef","_ComposeToRef","instanceWM","y_1","copyFromFloats","rx","ry","rz","Quaternion","RotationYawPitchRollToRef","wmIndex","set","nbAvailableInstancesPerType","_nbAvailableInstancesPerType","typeNb","engine","getEngine","mesh","alwaysSelectAsActiveMesh","instances","manualUpdateOfWorldMatrixInstancedBuffer","instance","freezeWorldMatrix","doNotSyncBoundingInfo","colorArray","c","colorBuffer","setVerticesBuffer","prototype","force","needsUpdate","updateLOD","updateForced","terrainPosition","cameraPosition","terrainHalfSizeX","terrainHalfSizeZ","deltaX","deltaZ","subToleranceX","subToleranceZ","mod","oldCorrection","updateCameraLOD","LODValue","mapShiftX","mapShiftZ","mapFlgtNb","deltaSubX","deltaSubZ","signX","signZ","updateSize","_updateTerrain","centerLocal","stepJ","stepI","LODLimitDown","LODLimitUp","axisLODValue","lodI","lodJ","bbMin","_bbMin","bbMax","_bbMax","terrain","positions","normals","mapSPData","nbPerType","mapInstanceData","colorStride","uvStride","LODLimits","terrainIdx","datamap","uvmap","colormap","useCustomVertexFunction","updateVertex","dontComputeNormals","LODpstvX","LODngtvX","LODpstvZ","LODngtvZ","averageSubSizeX","averageSubSizeZ","particleMap","particleColorMap","particleUVMap","instanceMap","instanceColorMap","copyArrayValuesFromToRef","_CopyArrayValuesFromToRef","matZero","_matZero","l","posIndex1","posIndex2","posIndex3","ribbonInd","ribbonPosInd","ribbonUVInd","ribbonColInd","ribbonColInd1","ribbonColInd2","ribbonColInd3","ribbonColInd4","ribbonPosInd1","ribbonPosInd2","ribbonPosInd3","updateTerrainSize","FromFloatsToRef","Number","MAX_VALUE","terrainPos","sourceMesh","instancedBuffer","worldMatrixInstancedBuffer","offset","seamX","seamZ","seamXIndex","seamZIndex","prevXIndex","prevZIndex","axisZLODValue","axisXLODValue","curXIndex","curZIndex","positionsLength","uvsLength","colorsLength","zIndex","xIndex","back3","ind1","ind2","ind3","back2","back4","induv","indcol","vertex","_vertex","vertexPosition","vertexWorldPosition","worldPosition","vertexColor","vertexUvs","lodX","lodZ","mapIndex","r","g","b","a","partIndexes","sp_colorData","sp_uvData","typeStartIndex","nbQuadParticles","nbInSPS","available","rem","used","min","px","idm","particle","pos","rot","rotation","scl","scaling","idc","iduv","uvs_1","w","colorBuffers","tmpCol","_col","instanceIndexes","instWM","instance_colorData","nbQuadInstances","nbInstances","iIdx","ix","nextFree","bufferIndex","colorBufferIndex","updateDirectly","setParticles","updateVerticesData","VertexData","ComputeNormals","_boundingInfo","reConstruct","_worldMatrix","remainder","next","lod","tsx","tsz","getHeightFromMap","_GetHeightFromMap","GetHeightFromMap","inverted","col1","row1","col2","row2","idx1","idx2","idx3","idx4","v1","_v1","v2","_v2","v3","_v3","v4","_v4","vAvB","_vAvB","vAvC","_vAvC","norm","_norm","vA","vB","vC","xv4v1","zv4v1","cd","h","subtractToRef","CrossToRef","normalize","scaleInPlace","normal","copyFrom","d","ComputeNormalsFromMapToRef","mapIndices","tmp1","tmp2","normal1","normal2","lastIdx","colStart","colEnd","addInPlace","contains","meshPosition","CreateMapFromHeightMap","heightmapURL","subX","subZ","CreateMapFromHeightMapToRef","width","height","minHeight","maxHeight","offsetX","offsetZ","filter","colorFilter","Color3","onReady","onload","img","canvas","document","createElement","context","getContext","bufferWidth","bufferHeight","drawImage","buffer","getImageData","heightmapX","heightmapY","gradient","idx","Tools","LoadImage","offlineProvider","CreateUVMapToRef","CreateUVMap","createUVMap","scale","translation","m","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","source","start","target","Object","defineProperty","get","val","enumerable","configurable","ar","sort","terrainCamera","camLOD","Identity"],"mappings":"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","sourcesContent":["var BABYLON;(function(BABYLON){var DynamicTerrain=function(){function DynamicTerrain(name,options,scene){var _this=this;this._particleDataStride=9;this._particleColorStride=4;this._particleUVStride=4;this._typeSPS=0;this._typeInstance=1;this._subToleranceX=1|0;this._subToleranceZ=1|0;this._LODLimits=[];this._initialLOD=1|0;this._LODValue=1|0;this._cameraLODCorrection=0|0;this._LODPositiveX=true;this._LODNegativeX=true;this._LODPositiveZ=true;this._LODNegativeZ=true;this._inverted=false;this.shiftFromCamera={x:0,z:0};this._deltaSubX=0|0;this._deltaSubZ=0|0;this._refreshEveryFrame=false;this._useCustomVertexFunction=false;this._computeNormals=false;this._datamap=false;this._uvmap=false;this._colormap=false;this._mapSPData=false;this._colorSPData=false;this._uvSPData=false;this._mapInstanceData=false;this._colorInstanceData=false;this._precomputeInstances=true;this._averageSubSizeX=0;this._averageSubSizeZ=0;this._terrainSizeX=0;this._terrainSizeZ=0;this._terrainHalfSizeX=0;this._terrainHalfSizeZ=0;this._centerWorld=BABYLON.Vector3.Zero();this._centerLocal=BABYLON.Vector3.Zero();this._mapSizeX=0;this._mapSizeZ=0;this._isAlwaysVisible=false;this._precomputeNormalsFromMap=false;this.name=name;this._terrainSub=options.terrainSub||60;this._mapData=options.mapData;this._terrainIdx=this._terrainSub+1;this._mapSubX=options.mapSubX||this._terrainIdx;this._mapSubZ=options.mapSubZ||this._terrainIdx;this._mapUVs=options.mapUVs;this._mapColors=options.mapColors;this._scene=scene;this._terrainCamera=options.camera||scene.activeCamera;this._inverted=options.invertSide;this._SPmapData=options.SPmapData;this._SPcolorData=options.SPcolorData;this._SPuvData=options.SPuvData;this._sps=options.sps;this._instanceMapData=options.instanceMapData;this._instanceColorData=options.instanceColorData;this._sourceMeshes=options.sourceMeshes;this._precomputeInstances=options.precomputeInstances?options.precomputeInstances:true;this._datamap=this._mapData?true:false;this._uvmap=this._mapUVs?true:false;this._colormap=this._mapColors?true:false;this._mapSPData=this._SPmapData?true:false;this._colorSPData=this._mapSPData&&this._SPcolorData?true:false;this._uvSPData=this._mapSPData&&this._SPuvData?true:false;this._mapInstanceData=this._instanceMapData?true:false;this._colorInstanceData=this._mapInstanceData&&this._instanceColorData?true:false;this._mapData=this._datamap?this._mapData:new Float32Array(this._terrainIdx*this._terrainIdx*3);this._mapUVs=this._uvmap?this._mapUVs:new Float32Array(this._terrainIdx*this._terrainIdx*2);if(this._datamap){this._mapNormals=options.mapNormals||new Float32Array(this._mapSubX*this._mapSubZ*3)}else{this._mapNormals=new Float32Array(this._terrainIdx*this._terrainIdx*3)}this._mapQuads=[];var index=0;var posIndex=0;var colIndex=0;var uvIndex=0;var color;var uv;var terIndex=0;var y=0;var terrainPath;var u=0;var v=0;var lg=this._terrainIdx+1;var terrainData=[];var terrainColor=[];var terrainUV=[];var mapData=this._mapData;var mapColors=this._mapColors;var mapUVs=this._mapUVs;var nbAvailableParticlesPerType=[];this._nbAvailableParticlesPerType=nbAvailableParticlesPerType;for(var j=0;j<=this._terrainSub;j++){terrainPath=[];for(var i=0;i<=this._terrainSub;i++){index=this._mod(j*3,this._mapSubZ)*this._mapSubX+this._mod(i*3,this._mapSubX);posIndex=index*3;colIndex=index*3;uvIndex=index*2;terIndex=j*this._terrainIdx+i;if(this._datamap){y=mapData[posIndex+1]}else{y=0;mapData[3*terIndex]=i;mapData[3*terIndex+1]=y;mapData[3*terIndex+2]=j}terrainPath.push(new BABYLON.Vector3(i,y,j));if(this._colormap){color=new BABYLON.Color4(mapColors[colIndex],mapColors[colIndex+1],mapColors[colIndex+2],1)}else{color=new BABYLON.Color4(1,1,1,1)}terrainColor.push(color);if(this._uvmap){uv=new BABYLON.Vector2(mapUVs[uvIndex],mapUVs[uvIndex+1])}else{u=1-Math.abs(1-2*i/lg);v=1-Math.abs(1-2*j/lg);mapUVs[2*terIndex]=u;mapUVs[2*terIndex+1]=v;uv=new BABYLON.Vector2(u,v)}terrainUV.push(uv)}terrainData.push(terrainPath)}this._mapSizeX=Math.abs(mapData[(this._mapSubX-1)*3]-mapData[0]);this._mapSizeZ=Math.abs(mapData[(this._mapSubZ-1)*this._mapSubX*3+2]-mapData[2]);this._averageSubSizeX=this._mapSizeX/this._mapSubX;this._averageSubSizeZ=this._mapSizeZ/this._mapSubZ;var ribbonOptions={pathArray:terrainData,sideOrientation:options.invertSide?BABYLON.Mesh.FRONTSIDE:BABYLON.Mesh.BACKSIDE,colors:terrainColor,uvs:terrainUV,updatable:true};this._terrain=BABYLON.MeshBuilder.CreateRibbon(\"terrain\",ribbonOptions,this._scene);this._indices=this._terrain.getIndices();this._positions=this._terrain.getVerticesData(BABYLON.VertexBuffer.PositionKind);this._normals=this._terrain.getVerticesData(BABYLON.VertexBuffer.NormalKind);this._uvs=this._terrain.getVerticesData(BABYLON.VertexBuffer.UVKind);this._colors=this._terrain.getVerticesData(BABYLON.VertexBuffer.ColorKind);this.computeNormalsFromMap();this.update(true);this._terrain.position.x=this._terrainCamera.globalPosition.x-this._terrainHalfSizeX+this.shiftFromCamera.x;this._terrain.position.z=this._terrainCamera.globalPosition.z-this._terrainHalfSizeZ+this.shiftFromCamera.z;var deltaNbSubX=(this._terrain.position.x-mapData[0])/this._averageSubSizeX;var deltaNbSubZ=(this._terrain.position.z-mapData[2])/this._averageSubSizeZ;this._deltaSubX=deltaNbSubX>0?Math.floor(deltaNbSubX):Math.ceil(deltaNbSubX);this._deltaSubZ=deltaNbSubZ>0?Math.floor(deltaNbSubZ):Math.ceil(deltaNbSubZ);this._scene.onBeforeRenderObservable.add(function(){var refreshEveryFrame=_this._refreshEveryFrame;_this.beforeUpdate(refreshEveryFrame);_this.update(refreshEveryFrame);_this.afterUpdate(refreshEveryFrame)});var SPmapData=this._SPmapData;var instanceMapData=this._instanceMapData;var dataStride=this._particleDataStride;var typeSPS=this._typeSPS;var typeInstance=this._typeInstance;var mapSizeX=this._mapSizeX;var mapSizeZ=this._mapSizeZ;var mapSubX=this._mapSubX;var mapSubZ=this._mapSubZ;var quads=this._mapQuads;if(this._mapSPData){var x0=mapData[0];var z0=mapData[2];for(var t=0;t<SPmapData.length;t++){var data=SPmapData[t];var nb=data.length/dataStride|0;for(var pIdx=0;pIdx<nb;pIdx++){var dIdx=pIdx*dataStride;var x=data[dIdx];var z=data[dIdx+2];x=x-Math.floor((x-x0)/mapSizeX)*mapSizeX;z=z-Math.floor((z-z0)/mapSizeZ)*mapSizeZ;var col=Math.floor((x-x0)*mapSubX/mapSizeX);var row=Math.floor((z-z0)*mapSubZ/mapSizeZ);var quadIdx=row*mapSubX+col;if(quads[quadIdx]===undefined){quads[quadIdx]=[];quads[quadIdx][typeSPS]=[]}if(quads[quadIdx][typeSPS][t]===undefined){quads[quadIdx][typeSPS][t]=[]}var quad=quads[quadIdx][typeSPS][t];quad.push(pIdx)}}var sps=this._sps;sps.computeBoundingBox=true;sps.isAlwaysVisible=true;if(this._colorSPData){sps.computeParticleColor=true}if(this._uvSPData){sps.computeParticleTexture=true}var spsTypeStartIndexes=[];this._spsTypeStartIndexes=spsTypeStartIndexes;var spsNbPerType=[];this._spsNbPerType=spsNbPerType;var nbParticles=sps.nbParticles;var particles=sps.particles;var type=0;spsTypeStartIndexes.push(type);nbAvailableParticlesPerType.push(0);var count=1;for(var p=1;p<nbParticles;p++){particles[p].isVisible=false;if(type!=particles[p].shapeId){type++;spsTypeStartIndexes.push(p);spsNbPerType.push(count);nbAvailableParticlesPerType.push(count);count=0}count++}spsNbPerType.push(count)}if(this._mapInstanceData){var x0=mapData[0];var z0=mapData[2];this._colorBuffers=[];this._instanceWM=[];var posVct=DynamicTerrain._pos;var sclVct=DynamicTerrain._scl;var mat=DynamicTerrain._mat;var quat=DynamicTerrain._quat;var composeToRef=DynamicTerrain._ComposeToRef;for(var t=0;t<instanceMapData.length;t++){var data=instanceMapData[t];var nb=data.length/dataStride|0;if(this._precomputeInstances){this._instanceWM[t]=new Float32Array(nb*16);var instanceWM=this._instanceWM[t]}for(var pIdx=0;pIdx<nb;pIdx++){var dIdx=pIdx*dataStride;var x=data[dIdx];var y_1=data[dIdx+1];var z=data[dIdx+2];if(this._precomputeInstances){posVct.copyFromFloats(x,y_1,z);var rx=data[dIdx+3];var ry=data[dIdx+4];var rz=data[dIdx+5];BABYLON.Quaternion.RotationYawPitchRollToRef(ry,rx,rz,quat);sclVct.copyFromFloats(data[dIdx+6],data[dIdx+7],data[dIdx+8]);composeToRef(sclVct,quat,posVct,mat);var wmIndex=16*pIdx;instanceWM.set(mat,wmIndex)}x=x-Math.floor((x-x0)/mapSizeX)*mapSizeX;z=z-Math.floor((z-z0)/mapSizeZ)*mapSizeZ;var col=Math.floor((x-x0)*mapSubX/mapSizeX);var row=Math.floor((z-z0)*mapSubZ/mapSizeZ);var quadIdx=row*mapSubX+col;if(quads[quadIdx]===undefined){quads[quadIdx]=[];quads[quadIdx][typeInstance]=[]}if(quads[quadIdx][typeInstance]===undefined){quads[quadIdx][typeInstance]=[]}if(quads[quadIdx][typeInstance][t]===undefined){quads[quadIdx][typeInstance][t]=[]}var quad=quads[quadIdx][typeInstance][t];quad.push(pIdx)}}var nbAvailableInstancesPerType=[];this._nbAvailableInstancesPerType=nbAvailableInstancesPerType;var typeNb=this._sourceMeshes.length;var engine=this._scene.getEngine();for(var t=0;t<typeNb;t++){var mesh=this._sourceMeshes[t];mesh.alwaysSelectAsActiveMesh=true;var nb=mesh.instances.length;nbAvailableInstancesPerType[t]=nb;mesh.manualUpdateOfWorldMatrixInstancedBuffer=true;for(var i=0;i<mesh.instances.length;i++){var instance=mesh.instances[i];instance.freezeWorldMatrix();instance.alwaysSelectAsActiveMesh=true;instance.doNotSyncBoundingInfo=true}if(this._colorInstanceData){var colorArray=new Float32Array(4*(mesh.instances.length+1));for(var c=0;c<colorArray.length;c++){colorArray[c]=1}var colorBuffer=new BABYLON.VertexBuffer(engine,colorArray,BABYLON.VertexBuffer.ColorKind,true,false,4,true);mesh.setVerticesBuffer(colorBuffer);this._colorBuffers.push(colorBuffer)}}}this.update(true)}DynamicTerrain.prototype.update=function(force){var needsUpdate=false;var updateLOD=false;var updateForced=force?true:false;var terrainPosition=this._terrain.position;var cameraPosition=this._terrainCamera.globalPosition;var shiftFromCamera=this.shiftFromCamera;var terrainHalfSizeX=this._terrainHalfSizeX;var terrainHalfSizeZ=this._terrainHalfSizeZ;var deltaX=terrainHalfSizeX+terrainPosition.x-cameraPosition.x-shiftFromCamera.x;var deltaZ=terrainHalfSizeZ+terrainPosition.z-cameraPosition.z-shiftFromCamera.z;var subToleranceX=this._subToleranceX;var subToleranceZ=this._subToleranceZ;var mod=this._mod;var oldCorrection=this._cameraLODCorrection;this._cameraLODCorrection=this.updateCameraLOD(this._terrainCamera)|0;updateLOD=oldCorrection==this._cameraLODCorrection?false:true;var LODValue=this._initialLOD+this._cameraLODCorrection;LODValue=LODValue>0?LODValue:1;this._LODValue=LODValue;var mapShiftX=this._averageSubSizeX*subToleranceX*LODValue;var mapShiftZ=this._averageSubSizeZ*subToleranceZ*LODValue;var mapFlgtNb=0|0;var deltaSubX=this._deltaSubX;var deltaSubZ=this._deltaSubZ;if(Math.abs(deltaX)>mapShiftX){var signX=deltaX>0?-1:1;mapFlgtNb=Math.abs(deltaX/mapShiftX)|0;terrainPosition.x+=mapShiftX*signX*mapFlgtNb;deltaSubX+=subToleranceX*signX*LODValue*mapFlgtNb;needsUpdate=true}if(Math.abs(deltaZ)>mapShiftZ){var signZ=deltaZ>0?-1:1;mapFlgtNb=Math.abs(deltaZ/mapShiftZ)|0;terrainPosition.z+=mapShiftZ*signZ*mapFlgtNb;deltaSubZ+=subToleranceZ*signZ*LODValue*mapFlgtNb;needsUpdate=true}var updateSize=updateLOD||updateForced;if(needsUpdate||updateSize){this._deltaSubX=mod(deltaSubX,this._mapSubX);this._deltaSubZ=mod(deltaSubZ,this._mapSubZ);this._updateTerrain(updateSize)}terrainHalfSizeX=this._terrainHalfSizeX;terrainHalfSizeZ=this._terrainHalfSizeZ;this.centerLocal.copyFromFloats(terrainHalfSizeX,0,terrainHalfSizeZ);this._centerWorld.copyFromFloats(terrainPosition.x+terrainHalfSizeX,terrainPosition.y,terrainPosition.z+terrainHalfSizeZ);return this};DynamicTerrain.prototype._updateTerrain=function(updateSize){var stepJ=0|0;var stepI=0|0;var LODLimitDown=0|0;var LODLimitUp=0|0;var LODValue=this._LODValue;var axisLODValue=LODValue;var lodI=LODValue;var lodJ=LODValue;var bbMin=DynamicTerrain._bbMin;var bbMax=DynamicTerrain._bbMax;var terrain=this._terrain;var positions=this._positions;var normals=this._normals;var colors=this._colors;var uvs=this._uvs;var mapColors=this._mapColors;var mapNormals=this._mapNormals;var mapData=this._mapData;var mapUVs=this._mapUVs;var mapSPData=this._mapSPData;var quads=this._mapQuads;var nbPerType=this._spsNbPerType;var SPmapData=this._SPmapData;var SPcolorData=this._SPcolorData;var SPuvData=this._SPuvData;var mapInstanceData=this._mapInstanceData;var instanceMapData=this._instanceMapData;var instanceColorData=this._instanceColorData;var dataStride=this._particleDataStride;var colorStride=this._particleColorStride;var uvStride=this._particleUVStride;var LODLimits=this._LODLimits;var terrainSub=this._terrainSub;var mod=this._mod;var terrainIdx=this._terrainIdx;var mapSubX=this._mapSubX;var mapSubZ=this._mapSubZ;var deltaSubX=this._deltaSubX;var deltaSubZ=this._deltaSubZ;var datamap=this._datamap;var uvmap=this._uvmap;var colormap=this._colormap;var useCustomVertexFunction=this._useCustomVertexFunction;var updateVertex=this.updateVertex;var dontComputeNormals=!this._computeNormals;var LODpstvX=this._LODPositiveX;var LODngtvX=this._LODNegativeX;var LODpstvZ=this._LODPositiveZ;var LODngtvZ=this._LODNegativeZ;var mapSizeX=this._mapSizeX;var mapSizeZ=this._mapSizeZ;var averageSubSizeX=this._averageSubSizeX;var averageSubSizeZ=this._averageSubSizeZ;var particleMap=mapSPData&&quads;var particleColorMap=particleMap&&this._colorSPData;var particleUVMap=particleMap&&this._uvSPData;var typeSPS=this._typeSPS;var typeInstance=this._typeInstance;var instanceMap=mapInstanceData&&quads;var instanceColorMap=instanceMap&&this._colorInstanceData;var precomputeInstances=this._precomputeInstances;var sourceMeshes=this._sourceMeshes;var nbAvailableInstancesPerType=this._nbAvailableInstancesPerType;var composeToRef=DynamicTerrain._ComposeToRef;var copyArrayValuesFromToRef=DynamicTerrain._CopyArrayValuesFromToRef;var instanceWM=this._instanceWM;var sclVct=DynamicTerrain._scl;var posVct=DynamicTerrain._pos;var quat=DynamicTerrain._quat;var matZero=DynamicTerrain._matZero;var l=0|0;var index=0|0;var posIndex1=0|0;var posIndex2=0|0;var posIndex3=0|0;var colIndex=0|0;var uvIndex=0|0;var terIndex=0|0;var ribbonInd=0|0;var ribbonPosInd=0|0;var ribbonUVInd=0|0;var ribbonColInd=0|0;var ribbonColInd1=0|0;var ribbonColInd2=0|0;var ribbonColInd3=0|0;var ribbonColInd4=0|0;var ribbonPosInd1=0|0;var ribbonPosInd2=0|0;var ribbonPosInd3=0|0;if(updateSize){this.updateTerrainSize()}BABYLON.Vector3.FromFloatsToRef(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE,bbMin);BABYLON.Vector3.FromFloatsToRef(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE,bbMax);var x0=mapData[0];var z0=mapData[2];var terrainPos=terrain.position;if(particleMap){var sps=this._sps;var particles=sps.particles;var spsTypeStartIndexes=this._spsTypeStartIndexes;var nbAvailableParticlesPerType=this._nbAvailableParticlesPerType;var nbParticles=sps.nbParticles;for(var p=0;p<nbParticles;p++){particles[p].isVisible=false}}if(instanceMap){var mat=DynamicTerrain._mat;for(var t=0;t<sourceMeshes.length;t++){var sourceMesh=sourceMeshes[t];var instancedBuffer=sourceMesh.worldMatrixInstancedBuffer;if(instancedBuffer){var instances=sourceMesh.instances;var offset=0;for(var i=0;i<instances.length;i++){instancedBuffer.set(matZero,offset);offset+=16}}}}var seamX=false;var seamZ=false;var seamXIndex=0|0;var seamZIndex=0|0;var prevXIndex=mod(deltaSubX,mapSubX);var prevZIndex=mod(deltaSubZ,mapSubZ);var axisZLODValue=0|0;var axisXLODValue=0|0;var curXIndex=0|0;var curZIndex=0|0;var positionsLength=positions.length;var uvsLength=uvs.length;var colorsLength=colors.length;for(var j=1|0;j<=terrainSub;j++){axisZLODValue=LODValue;axisXLODValue=LODValue;for(l=0;l<LODLimits.length;l++){LODLimitDown=LODLimits[l];LODLimitUp=terrainSub-LODLimitDown-1;if(LODngtvZ&&j<LODLimitDown||LODpstvZ&&j>LODLimitUp){axisZLODValue=l+1+LODValue}if(LODngtvX&&j<LODLimitDown||LODpstvX&&j>LODLimitUp){axisXLODValue=l+1+LODValue}lodJ=axisZLODValue;lodI=axisXLODValue}stepJ+=lodJ;stepI+=lodI;if(!seamX){curXIndex=mod(deltaSubX+stepI,mapSubX);if(Math.abs(curXIndex-prevXIndex)>lodI){seamX=true;seamXIndex=stepI}else{prevXIndex=curXIndex}}if(!seamZ){curZIndex=mod(deltaSubZ+stepJ,mapSubZ);if(Math.abs(curZIndex-prevZIndex)>lodJ){seamZ=true;seamZIndex=stepJ}else{prevZIndex=curZIndex}}if(seamZ&&seamX){break}}stepI=0|0;stepJ=0|0;lodI=LODValue;lodJ=LODValue;var zIndex=0|0;var xIndex=0|0;for(var j=0|0;j<=terrainSub;j++){axisLODValue=LODValue;for(l=0;l<LODLimits.length;l++){LODLimitDown=LODLimits[l];LODLimitUp=terrainSub-LODLimitDown-1;if(LODngtvZ&&j<LODLimitDown||LODpstvZ&&j>LODLimitUp){axisLODValue=l+1+LODValue}lodJ=axisLODValue}zIndex=mod(deltaSubZ+stepJ,mapSubZ);for(var i=0|0;i<=terrainSub;i++){axisLODValue=LODValue;for(l=0;l<LODLimits.length;l++){LODLimitDown=LODLimits[l];LODLimitUp=terrainSub-LODLimitDown-1;if(LODngtvX&&i<LODLimitDown||LODpstvX&&i>LODLimitUp){axisLODValue=l+1+LODValue}lodI=axisLODValue}xIndex=mod(deltaSubX+stepI,mapSubX);index=zIndex*mapSubX+xIndex;terIndex=mod(deltaSubZ+stepJ,terrainIdx)*terrainIdx+mod(deltaSubX+stepI,terrainIdx);if(datamap){posIndex1=3*index}else{posIndex1=3*terIndex}if(uvmap){uvIndex=2*index}else{uvIndex=2*terIndex}if(colormap){colIndex=3*index}else{colIndex=3*terIndex}posIndex2=posIndex1+1;posIndex3=posIndex1+2;ribbonPosInd=3*ribbonInd;ribbonColInd=4*ribbonInd;ribbonUVInd=2*ribbonInd;ribbonPosInd1=ribbonPosInd;ribbonPosInd2=ribbonPosInd+1;ribbonPosInd3=ribbonPosInd+2;ribbonColInd1=ribbonColInd;ribbonColInd2=ribbonColInd+1;ribbonColInd3=ribbonColInd+2;ribbonColInd4=ribbonColInd+3;ribbonInd+=1;positions[ribbonPosInd1]=averageSubSizeX*stepI;positions[ribbonPosInd2]=mapData[posIndex2];positions[ribbonPosInd3]=averageSubSizeZ*stepJ;if(dontComputeNormals){normals[ribbonPosInd1]=mapNormals[posIndex1];normals[ribbonPosInd2]=mapNormals[posIndex2];normals[ribbonPosInd3]=mapNormals[posIndex3]}uvs[ribbonUVInd]=mapUVs[uvIndex];uvs[ribbonUVInd+1]=mapUVs[uvIndex+1];if(colormap){colors[ribbonColInd1]=mapColors[colIndex];colors[ribbonColInd2]=mapColors[colIndex+1];colors[ribbonColInd3]=mapColors[colIndex+2]}if(seamZ&&(seamZIndex==stepJ||stepJ==seamZIndex+1)){var back3=3*terrainSub+3;var ind1=mod(ribbonPosInd1-back3,positionsLength);var ind2=ind1+1;var ind3=ind1+2;positions[ribbonPosInd1]=positions[ind1];positions[ribbonPosInd2]=positions[ind2];positions[ribbonPosInd3]=positions[ind3];if(dontComputeNormals){normals[ribbonPosInd1]=normals[ind1];normals[ribbonPosInd2]=normals[ind2];normals[ribbonPosInd3]=normals[ind3]}var back2=2*terrainSub+2;var back4=2*back2;if(stepJ==seamZIndex+1){var induv=mod(ribbonUVInd-back2,uvsLength);uvs[ribbonUVInd]=uvs[induv];uvs[ribbonUVInd+1]=uvs[induv+1];if(colormap){var indcol=mod(ribbonColInd-back4,colorsLength);colors[ribbonColInd1]=colors[indcol];colors[ribbonColInd2]=colors[indcol+1];colors[ribbonColInd3]=colors[indcol+2]}}}if(seamX&&(seamXIndex==stepI||stepI==seamXIndex+1)){var back3=3;var ind1=mod(ribbonPosInd1-back3,positionsLength);var ind2=ind1+1;var ind3=ind1+2;positions[ribbonPosInd1]=positions[ind1];positions[ribbonPosInd2]=positions[ind2];positions[ribbonPosInd3]=positions[ind3];if(dontComputeNormals){normals[ribbonPosInd1]=normals[ind1];normals[ribbonPosInd2]=normals[ind2];normals[ribbonPosInd3]=normals[ind3]}var back2=2;var back4=4;if(stepI==seamXIndex+1){var induv=mod(ribbonUVInd-back2,uvsLength);uvs[ribbonUVInd]=uvs[induv];uvs[ribbonUVInd+1]=uvs[induv+1];if(colormap){var indcol=mod(ribbonColInd-back4,colorsLength);colors[ribbonColInd1]=colors[indcol];colors[ribbonColInd2]=colors[indcol+1];colors[ribbonColInd3]=colors[indcol+2]}}}if(positions[ribbonPosInd1]<bbMin.x){bbMin.x=positions[ribbonPosInd1]}if(positions[ribbonPosInd1]>bbMax.x){bbMax.x=positions[ribbonPosInd1]}if(positions[ribbonPosInd2]<bbMin.y){bbMin.y=positions[ribbonPosInd2]}if(positions[ribbonPosInd2]>bbMax.y){bbMax.y=positions[ribbonPosInd2]}if(positions[ribbonPosInd3]<bbMin.z){bbMin.z=positions[ribbonPosInd3]}if(positions[ribbonPosInd3]>bbMax.z){bbMax.z=positions[ribbonPosInd3]}if(useCustomVertexFunction){var vertex=DynamicTerrain._vertex;var vertexPosition=vertex.position;var vertexWorldPosition=vertex.worldPosition;var vertexColor=vertex.color;var vertexUvs=vertex.uvs;vertexPosition.copyFromFloats(positions[ribbonPosInd1],positions[ribbonPosInd2],positions[ribbonPosInd3]);vertexWorldPosition.copyFromFloats(mapData[posIndex1],vertexPosition.y,mapData[posIndex3]);vertex.lodX=lodI;vertex.lodZ=lodJ;vertexColor.copyFromFloats(colors[ribbonColInd1],colors[ribbonColInd2],colors[ribbonColInd3],colors[ribbonColInd4]);vertexUvs.copyFromFloats(uvs[ribbonUVInd],uvs[ribbonUVInd+1]);vertex.mapIndex=index;updateVertex(vertex,i,j);colors[ribbonColInd1]=vertexColor.r;colors[ribbonColInd2]=vertexColor.g;colors[ribbonColInd3]=vertexColor.b;colors[ribbonColInd4]=vertexColor.a;uvs[ribbonUVInd]=vertexUvs.x;uvs[ribbonUVInd+1]=vertexUvs.y;positions[ribbonPosInd1]=vertexPosition.x;positions[ribbonPosInd2]=vertexPosition.y;positions[ribbonPosInd3]=vertexPosition.z}if(particleMap){if(quads[index]){var quad=quads[index][typeSPS];for(var t=0;t<quad.length;t++){var data=SPmapData[t];var partIndexes=quad[t];if(particleColorMap){var sp_colorData=SPcolorData[t]}if(particleUVMap){var sp_uvData=SPuvData[t]}if(partIndexes){var typeStartIndex=spsTypeStartIndexes[t];var nbQuadParticles=partIndexes.length;var nbInSPS=nbPerType[t];var available=nbAvailableParticlesPerType[t];var rem=nbInSPS-available;var used=rem>0?rem:0;var min=available<nbQuadParticles?available:nbQuadParticles;for(var pIdx=0;pIdx<min;pIdx++){var px=partIndexes[pIdx];var idm=px*dataStride;var particle=particles[typeStartIndex+pIdx+used];var pos=particle.position;var rot=particle.rotation;var scl=particle.scaling;var x=data[idm];pos.x=x+Math.floor((terrainPos.x-x-x0)/mapSizeX)*mapSizeX;pos.y=data[idm+1];var z=data[idm+2];pos.z=z+Math.floor((terrainPos.z-z-z0)/mapSizeZ)*mapSizeZ;rot.x=data[idm+3];rot.y=data[idm+4];rot.z=data[idm+5];scl.x=data[idm+6];scl.y=data[idm+7];scl.z=data[idm+8];if(particleColorMap){var idc=px*colorStride;var col=particle.color;col.r=sp_colorData[idc];col.g=sp_colorData[idc+1];col.b=sp_colorData[idc+2];col.a=sp_colorData[idc+3]}if(particleUVMap){var iduv=px*uvStride;var uvs_1=particle.uvs;uvs_1.x=sp_uvData[iduv];uvs_1.y=sp_uvData[iduv+1];uvs_1.z=sp_uvData[iduv+2];uvs_1.w=sp_uvData[iduv+3]}particle.isVisible=true;available=available-1;used=used+1;min=available<nbQuadParticles?available:nbQuadParticles}available=available>0?available:0;nbAvailableParticlesPerType[t]=available}}}}if(instanceMap){if(quads[index]){var quad=quads[index][typeInstance];var colorBuffers=this._colorBuffers;var tmpCol=DynamicTerrain._col;for(var t=0;t<quad.length;t++){var sourceMesh=this._sourceMeshes[t];var instances=sourceMesh.instances;var instancedBuffer=sourceMesh.worldMatrixInstancedBuffer;var data=instanceMapData[t];var instanceIndexes=quad[t];var instWM=instanceWM[t];if(instanceColorMap){var instance_colorData=instanceColorData[t];var colorBuffer=colorBuffers[t]}if(instanceIndexes&&instancedBuffer){var nbQuadInstances=instanceIndexes.length;var nbInstances=instances.length;var available=nbAvailableInstancesPerType[t];var rem=nbInstances-available;var used=rem>0?rem:0;var min=available<nbQuadInstances?available:nbQuadInstances;for(var iIdx=0;iIdx<min;iIdx++){var ix=instanceIndexes[iIdx];var idm=ix*dataStride;var nextFree=iIdx+used;var bufferIndex=nextFree*16;if(precomputeInstances){copyArrayValuesFromToRef(instWM,ix*16,16,mat)}else{var x=data[idm];var y=data[idm+1];var z=data[idm+2];x=x+Math.floor((terrainPos.x-x-x0)/mapSizeX)*mapSizeX;z=z+Math.floor((terrainPos.z-z-z0)/mapSizeZ)*mapSizeZ;posVct.copyFromFloats(x,y,z);x=data[idm+3];y=data[idm+4];z=data[idm+5];BABYLON.Quaternion.RotationYawPitchRollToRef(y,x,z,quat);sclVct.copyFromFloats(data[idm+6],data[idm+7],data[idm+8]);composeToRef(sclVct,quat,posVct,mat)}instancedBuffer.set(mat,bufferIndex);if(instanceColorData){var idc=ix*colorStride;var colorBufferIndex=nextFree*4;tmpCol[0]=instance_colorData[idc];tmpCol[1]=instance_colorData[idc+1];tmpCol[2]=instance_colorData[idc+2];tmpCol[3]=instance_colorData[idc+3];colorBuffer.updateDirectly(tmpCol,colorBufferIndex)}available=available-1;used=used+1;min=available<nbQuadInstances?available:nbQuadInstances}available=available>0?available:0;this._nbAvailableInstancesPerType[t]=available}}}}stepI+=lodI}if(seamX&&seamXIndex+1==stepI){seamX=false}if(seamZ&&seamZIndex+1==stepJ){seamZ=false}stepJ+=lodJ;stepI=0}if(particleMap){sps.setParticles();for(var c=0;c<nbAvailableParticlesPerType.length;c++){nbAvailableParticlesPerType[c]=nbPerType[c]}}if(instanceMap&&nbAvailableInstancesPerType){for(var c=0;c<nbAvailableInstancesPerType.length;c++){nbAvailableInstancesPerType[c]=this._sourceMeshes[c].instances.length}}terrain.updateVerticesData(BABYLON.VertexBuffer.PositionKind,positions,false,false);if(this._computeNormals){BABYLON.VertexData.ComputeNormals(positions,this._indices,normals)}terrain.updateVerticesData(BABYLON.VertexBuffer.NormalKind,normals,false,false);terrain.updateVerticesData(BABYLON.VertexBuffer.UVKind,uvs,false,false);terrain.updateVerticesData(BABYLON.VertexBuffer.ColorKind,colors,false,false);terrain._boundingInfo.reConstruct(bbMin,bbMax,terrain._worldMatrix)};DynamicTerrain.prototype._mod=function(a,b){return(a%b+b)%b};DynamicTerrain.prototype.updateTerrainSize=function(){var remainder=this._terrainSub;var nb=0|0;var next=0|0;var LODValue=this._LODValue;var lod=LODValue+1;var tsx=0;var tsz=0;var LODLimits=this._LODLimits;var averageSubSizeX=this._averageSubSizeX;var averageSubSizeZ=this._averageSubSizeZ;for(var l=0|0;l<LODLimits.length;l++){lod=LODValue+l+1;next=l>=LODLimits.length-1?0:LODLimits[l+1];nb=2*(LODLimits[l]-next);tsx+=averageSubSizeX*lod*nb;tsz+=averageSubSizeZ*lod*nb;remainder-=nb}tsx+=remainder*averageSubSizeX*LODValue;tsz+=remainder*averageSubSizeZ*LODValue;this._terrainSizeX=tsx;this._terrainSizeZ=tsz;this._terrainHalfSizeX=tsx*.5;this._terrainHalfSizeZ=tsz*.5;return this};DynamicTerrain.prototype.getHeightFromMap=function(x,z,options){return DynamicTerrain._GetHeightFromMap(x,z,this._mapData,this._mapSubX,this._mapSubZ,this._mapSizeX,this._mapSizeZ,options,this._inverted)};DynamicTerrain.GetHeightFromMap=function(x,z,mapData,mapSubX,mapSubZ,options,inverted){var mapSizeX=Math.abs(mapData[(mapSubX-1)*3]-mapData[0]);var mapSizeZ=Math.abs(mapData[(mapSubZ-1)*mapSubX*3+2]-mapData[2]);return DynamicTerrain._GetHeightFromMap(x,z,mapData,mapSubX,mapSubZ,mapSizeX,mapSizeZ,options,inverted)};DynamicTerrain._GetHeightFromMap=function(x,z,mapData,mapSubX,mapSubZ,mapSizeX,mapSizeZ,options,inverted){var x0=mapData[0];var z0=mapData[2];x=x-Math.floor((x-x0)/mapSizeX)*mapSizeX;z=z-Math.floor((z-z0)/mapSizeZ)*mapSizeZ;var col1=Math.floor((x-x0)*mapSubX/mapSizeX);var row1=Math.floor((z-z0)*mapSubZ/mapSizeZ);var col2=(col1+1)%mapSubX;var row2=(row1+1)%mapSubZ;var idx1=3*(row1*mapSubX+col1);var idx2=3*(row1*mapSubX+col2);var idx3=3*(row2*mapSubX+col1);var idx4=3*(row2*mapSubX+col2);var v1=DynamicTerrain._v1;var v2=DynamicTerrain._v2;var v3=DynamicTerrain._v3;var v4=DynamicTerrain._v4;v1.copyFromFloats(mapData[idx1],mapData[idx1+1],mapData[idx1+2]);v2.copyFromFloats(mapData[idx2],mapData[idx2+1],mapData[idx2+2]);v3.copyFromFloats(mapData[idx3],mapData[idx3+1],mapData[idx3+2]);v4.copyFromFloats(mapData[idx4],mapData[idx4+1],mapData[idx4+2]);var vAvB=DynamicTerrain._vAvB;var vAvC=DynamicTerrain._vAvC;var norm=DynamicTerrain._norm;var vA=v1;var vB;var vC;var v;var xv4v1=v4.x-v1.x;var zv4v1=v4.z-v1.z;if(xv4v1==0||zv4v1==0){return v1.y}var cd=zv4v1/xv4v1;var h=v1.z-cd*v1.x;if(z<cd*x+h){vB=v4;vC=v2;v=vA}else{vB=v3;vC=v4;v=vB}vB.subtractToRef(vA,vAvB);vC.subtractToRef(vA,vAvC);BABYLON.Vector3.CrossToRef(vAvB,vAvC,norm);norm.normalize();if(inverted){norm.scaleInPlace(-1)}if(options&&options.normal){options.normal.copyFrom(norm)}var d=-(norm.x*v.x+norm.y*v.y+norm.z*v.z);var y=v.y;if(norm.y!=0){y=-(norm.x*x+norm.z*z+d)/norm.y}return y};DynamicTerrain.ComputeNormalsFromMapToRef=function(mapData,mapSubX,mapSubZ,normals,inverted){var mapIndices=[];var tmp1={normal:BABYLON.Vector3.Zero()};var tmp2={normal:BABYLON.Vector3.Zero()};var normal1=tmp1.normal;var normal2=tmp2.normal;var l=mapSubX*(mapSubZ-1);var i=0;for(i=0;i<l;i++){mapIndices.push(i+1,i+mapSubX,i);mapIndices.push(i+mapSubX,i+1,i+mapSubX+1)}BABYLON.VertexData.ComputeNormals(mapData,mapIndices,normals);var lastIdx=(mapSubX-1)*3;var colStart=0;var colEnd=0;var getHeightFromMap=DynamicTerrain.GetHeightFromMap;for(i=0;i<mapSubZ;i++){colStart=i*mapSubX*3;colEnd=colStart+lastIdx;getHeightFromMap(mapData[colStart],mapData[colStart+2],mapData,mapSubX,mapSubZ,tmp1);getHeightFromMap(mapData[colEnd],mapData[colEnd+2],mapData,mapSubX,mapSubZ,tmp2);normal1.addInPlace(normal2).scaleInPlace(.5);normals[colStart]=normal1.x;normals[colStart+1]=normal1.y;normals[colStart+2]=normal1.z;normals[colEnd]=normal1.x;normals[colEnd+1]=normal1.y;normals[colEnd+2]=normal1.z}if(inverted){for(i=0;i<normals.length;i++){normals[i]=-normals[i]}}};DynamicTerrain.prototype.computeNormalsFromMap=function(){DynamicTerrain.ComputeNormalsFromMapToRef(this._mapData,this._mapSubX,this._mapSubZ,this._mapNormals,this._inverted);return this};DynamicTerrain.prototype.contains=function(x,z){var positions=this._positions;var meshPosition=this.mesh.position;var terrainIdx=this._terrainIdx;if(x<positions[0]+meshPosition.x||x>positions[3*terrainIdx]+meshPosition.x){return false}if(z<positions[2]+meshPosition.z||z>positions[3*terrainIdx*terrainIdx+2]+meshPosition.z){return false}return true};DynamicTerrain.CreateMapFromHeightMap=function(heightmapURL,options,scene){var subX=options.subX||100;var subZ=options.subZ||100;var data=new Float32Array(subX*subZ*3);DynamicTerrain.CreateMapFromHeightMapToRef(heightmapURL,options,data,scene);return data};DynamicTerrain.CreateMapFromHeightMapToRef=function(heightmapURL,options,data,scene){var width=options.width||300;var height=options.height||300;var subX=options.subX||100;var subZ=options.subZ||100;var minHeight=options.minHeight||0;var maxHeight=options.maxHeight||10;var offsetX=options.offsetX||0;var offsetZ=options.offsetZ||0;var filter=options.colorFilter||new BABYLON.Color3(.3,.59,.11);var onReady=options.onReady;var onload=function(img){var canvas=document.createElement(\"canvas\");var context=canvas.getContext(\"2d\");var bufferWidth=img.width;var bufferHeight=img.height;canvas.width=bufferWidth;canvas.height=bufferHeight;context.drawImage(img,0,0);var buffer=context.getImageData(0,0,bufferWidth,bufferHeight).data;var x=0;var y=0;var z=0;for(var row=0;row<subZ;row++){for(var col=0;col<subX;col++){x=col*width/subX-width*.5;z=row*height/subZ-height*.5;var heightmapX=(x+width*.5)/width*(bufferWidth-1)|0;var heightmapY=bufferHeight-1-(z+height*.5)/height*(bufferHeight-1)|0;var pos=(heightmapX+heightmapY*bufferWidth)*4;var gradient=(buffer[pos]*filter.r+buffer[pos+1]*filter.g+buffer[pos+2]*filter.b)/255;y=minHeight+(maxHeight-minHeight)*gradient;var idx=(row*subX+col)*3;data[idx]=x+offsetX;data[idx+1]=y;data[idx+2]=z+offsetZ}}if(onReady){onReady(data,subX,subZ)}};BABYLON.Tools.LoadImage(heightmapURL,onload,function(){},scene.offlineProvider)};DynamicTerrain.CreateUVMapToRef=function(subX,subZ,mapUVs){for(var h=0;h<subZ;h++){for(var w=0;w<subX;w++){mapUVs[(h*subX+w)*2]=w/(subX-1);mapUVs[(h*subX+w)*2+1]=h/(subZ-1)}}};DynamicTerrain.CreateUVMap=function(subX,subZ){var mapUVs=new Float32Array(subX*subZ*2);DynamicTerrain.CreateUVMapToRef(subX,subZ,mapUVs);return mapUVs};DynamicTerrain.prototype.createUVMap=function(){this.mapUVs=DynamicTerrain.CreateUVMap(this._mapSubX,this._mapSubZ);return this};DynamicTerrain._ComposeToRef=function(scale,rotation,translation,m){var x=rotation.x,y=rotation.y,z=rotation.z,w=rotation.w;var x2=x+x,y2=y+y,z2=z+z;var xx=x*x2,xy=x*y2,xz=x*z2;var yy=y*y2,yz=y*z2,zz=z*z2;var wx=w*x2,wy=w*y2,wz=w*z2;var sx=scale.x,sy=scale.y,sz=scale.z;m[0]=(1-(yy+zz))*sx;m[1]=(xy+wz)*sx;m[2]=(xz-wy)*sx;m[3]=0;m[4]=(xy-wz)*sy;m[5]=(1-(xx+zz))*sy;m[6]=(yz+wx)*sy;m[7]=0;m[8]=(xz+wy)*sz;m[9]=(yz-wx)*sz;m[10]=(1-(xx+yy))*sz;m[11]=0;m[12]=translation.x;m[13]=translation.y;m[14]=translation.z;m[15]=1};DynamicTerrain._CopyArrayValuesFromToRef=function(source,start,nb,target){for(var i=0;i<nb;i++){target[i]=source[start+i]}};Object.defineProperty(DynamicTerrain.prototype,\"refreshEveryFrame\",{get:function(){return this._refreshEveryFrame},set:function(val){this._refreshEveryFrame=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mesh\",{get:function(){return this._terrain},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"camera\",{get:function(){return this._terrainCamera},set:function(val){this._terrainCamera=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"subToleranceX\",{get:function(){return this._subToleranceX},set:function(val){this._subToleranceX=val>0?val:1},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"subToleranceZ\",{get:function(){return this._subToleranceZ},set:function(val){this._subToleranceZ=val>0?val:1},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"initialLOD\",{get:function(){return this._initialLOD},set:function(val){this._initialLOD=val>0?val:1},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODValue\",{get:function(){return this._LODValue},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"cameraLODCorrection\",{get:function(){return this._cameraLODCorrection},set:function(val){this._cameraLODCorrection=val>=0?val:0},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODPositiveX\",{get:function(){return this._LODPositiveX},set:function(val){this._LODPositiveX=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODNegativeX\",{get:function(){return this._LODNegativeX},set:function(val){this._LODNegativeX=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODPositiveZ\",{get:function(){return this._LODPositiveZ},set:function(val){this._LODPositiveZ=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODNegativeZ\",{get:function(){return this._LODNegativeZ},set:function(val){this._LODNegativeZ=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"averageSubSizeX\",{get:function(){return this._averageSubSizeX},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"averageSubSizeZ\",{get:function(){return this._averageSubSizeZ},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"terrainSizeX\",{get:function(){return this._terrainSizeX},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"terrainHalfSizeX\",{get:function(){return this._terrainHalfSizeX},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"terrainSizeZ\",{get:function(){return this._terrainSizeZ},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"terrainHalfSizeZ\",{get:function(){return this._terrainHalfSizeZ},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"centerLocal\",{get:function(){return this._centerLocal},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"centerWorld\",{get:function(){return this._centerWorld},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"LODLimits\",{get:function(){return this._LODLimits},set:function(ar){ar.sort(function(a,b){return b-a});this._LODLimits=ar},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapData\",{get:function(){return this._mapData},set:function(val){this._mapData=val;this._datamap=true;var mapSubX=this._mapSubX;var mapSubZ=this._mapSubZ;this._mapSizeX=Math.abs(val[(mapSubX-1)*3]-val[0]);this._mapSizeZ=Math.abs(val[(mapSubZ-1)*mapSubX*3+2]-val[2]);this._averageSubSizeX=this._mapSizeX/mapSubX;this._averageSubSizeZ=this._mapSizeZ/mapSubZ;if(this._precomputeNormalsFromMap){this.computeNormalsFromMap()}this.update(true)},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapSubX\",{get:function(){return this._mapSubX},set:function(val){this._mapSubX=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapSubZ\",{get:function(){return this._mapSubZ},set:function(val){this._mapSubZ=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapColors\",{get:function(){return this._mapColors},set:function(val){this._colormap=true;this._mapColors=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapUVs\",{get:function(){return this._mapUVs},set:function(val){this._uvmap=true;this._mapUVs=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"mapNormals\",{get:function(){return this._mapNormals},set:function(val){this._mapNormals=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"computeNormals\",{get:function(){return this._computeNormals},set:function(val){this._computeNormals=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"useCustomVertexFunction\",{get:function(){return this._useCustomVertexFunction},set:function(val){this._useCustomVertexFunction=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"isAlwaysVisible\",{get:function(){return this._isAlwaysVisible},set:function(val){this.mesh.alwaysSelectAsActiveMesh=val;this._isAlwaysVisible=val},enumerable:true,configurable:true});Object.defineProperty(DynamicTerrain.prototype,\"precomputeNormalsFromMap\",{get:function(){return this._precomputeNormalsFromMap},set:function(val){this._precomputeNormalsFromMap=val},enumerable:true,configurable:true});DynamicTerrain.prototype.updateVertex=function(vertex,i,j){return};DynamicTerrain.prototype.updateCameraLOD=function(terrainCamera){var camLOD=0;return camLOD};DynamicTerrain.prototype.beforeUpdate=function(refreshEveryFrame){return};DynamicTerrain.prototype.afterUpdate=function(refreshEveryFrame){return};DynamicTerrain._vertex={position:BABYLON.Vector3.Zero(),uvs:BABYLON.Vector2.Zero(),color:new BABYLON.Color4(1,1,1,1),lodX:1|0,lodZ:1|0,worldPosition:BABYLON.Vector3.Zero(),mapIndex:0|0};DynamicTerrain._v1=BABYLON.Vector3.Zero();DynamicTerrain._v2=BABYLON.Vector3.Zero();DynamicTerrain._v3=BABYLON.Vector3.Zero();DynamicTerrain._v4=BABYLON.Vector3.Zero();DynamicTerrain._vAvB=BABYLON.Vector3.Zero();DynamicTerrain._vAvC=BABYLON.Vector3.Zero();DynamicTerrain._norm=BABYLON.Vector3.Zero();DynamicTerrain._bbMin=BABYLON.Vector3.Zero();DynamicTerrain._bbMax=BABYLON.Vector3.Zero();DynamicTerrain._pos=BABYLON.Vector3.Zero();DynamicTerrain._scl=BABYLON.Vector3.Zero();DynamicTerrain._quat=BABYLON.Quaternion.Identity();DynamicTerrain._mat=new Float32Array(16);DynamicTerrain._matZero=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]);DynamicTerrain._col=new Float32Array(4);return DynamicTerrain}();BABYLON.DynamicTerrain=DynamicTerrain})(BABYLON||(BABYLON={}));\n"]},"metadata":{},"sourceType":"script"}