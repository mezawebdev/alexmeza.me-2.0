{"ast":null,"code":"import Config from \"./Config\";\n\nclass Ground {\n  constructor(scene) {\n    this.scene = scene; // this.createGround();\n\n    this.createDynamicTerrain();\n    this.setMaterial();\n  }\n\n  createGround() {\n    // this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n    //     \"ground\", \n    //     Config.ground.heightMap, \n    //     Config.ground.width, \n    //     Config.ground.height, \n    //     Config.ground.subdivisions, \n    //     0, \n    //     Config.ground.textureHeight, \n    //     this.scene, \n    //     true\n    // );\n    this.defaultGround = new BABYLON.MeshBuilder.CreateGround(\"ground\", {\n      width: Config.ground.width,\n      height: Config.ground.height\n    });\n    this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n    this.defaultGround.position.x = Config.ground.x;\n    this.defaultGround.position.z = Config.ground.z;\n  }\n\n  createDynamicTerrain() {\n    let mapSubX = 500,\n        mapSubZ = 500,\n        mapData = new Float32Array(mapSubX * mapSubZ * 3); // for (var l = 0; l < mapSubZ; l++) {           \n    //     for (var w = 0; w < mapSubX; w++) {                \n    //         mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    //         mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n    //         mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n    //    }            \n    // }\n\n    var params = {\n      mapData: mapData,\n      mapSubX: mapSubX,\n      mapSubZ: mapSubZ,\n      terrainSub: 200\n    };\n    this.terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n    this.terrain.subToleranceX = 10;\n    this.terrain.subToleranceZ = 10;\n    this.terrain.LODLimits = [4, 3, 2, 1, 1];\n    this.terrainCreated = true;\n  }\n\n  setMaterial() {\n    this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n    this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n    this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n    this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n    this.gridMaterial.backFaceCulling = false;\n    this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n    this.gridMaterial.opacity = Config.ground.grid.opacity; // this.defaultGround.material = this.gridMaterial;\n\n    this.terrain.mesh.material = this.gridMaterial;\n  }\n\n}\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["Config","Ground","constructor","scene","createDynamicTerrain","setMaterial","createGround","defaultGround","BABYLON","MeshBuilder","CreateGround","width","ground","height","rotate","Axis","Y","rotation","Space","WORLD","position","x","z","mapSubX","mapSubZ","mapData","Float32Array","params","terrainSub","terrain","DynamicTerrain","subToleranceX","subToleranceZ","LODLimits","terrainCreated","gridMaterial","GridMaterial","mainColor","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","mesh","material"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb,CADe,CAEf;;AACA,SAAKC,oBAAL;AACA,SAAKC,WAAL;AACH;;AAEDC,EAAAA,YAAY,GAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKC,aAAL,GAAqB,IAAIC,OAAO,CAACC,WAAR,CAAoBC,YAAxB,CAAqC,QAArC,EAA+C;AAChEC,MAAAA,KAAK,EAAEX,MAAM,CAACY,MAAP,CAAcD,KAD2C;AAEhEE,MAAAA,MAAM,EAAEb,MAAM,CAACY,MAAP,CAAcC;AAF0C,KAA/C,CAArB;AAIA,SAAKN,aAAL,CAAmBO,MAAnB,CAA0BN,OAAO,CAACO,IAAR,CAAaC,CAAvC,EAA0ChB,MAAM,CAACY,MAAP,CAAcK,QAAxD,EAAkET,OAAO,CAACU,KAAR,CAAcC,KAAhF;AACA,SAAKZ,aAAL,CAAmBa,QAAnB,CAA4BC,CAA5B,GAAgCrB,MAAM,CAACY,MAAP,CAAcS,CAA9C;AACA,SAAKd,aAAL,CAAmBa,QAAnB,CAA4BE,CAA5B,GAAgCtB,MAAM,CAACY,MAAP,CAAcU,CAA9C;AACH;;AAEDlB,EAAAA,oBAAoB,GAAG;AACnB,QAAImB,OAAO,GAAG,GAAd;AAAA,QACIC,OAAO,GAAG,GADd;AAAA,QAEIC,OAAO,GAAG,IAAIC,YAAJ,CAAiBH,OAAO,GAAGC,OAAV,GAAoB,CAArC,CAFd,CADmB,CAKnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIG,MAAM,GAAG;AACTF,MAAAA,OAAO,EAAEA,OADA;AAETF,MAAAA,OAAO,EAAEA,OAFA;AAGTC,MAAAA,OAAO,EAAEA,OAHA;AAITI,MAAAA,UAAU,EAAE;AAJH,KAAb;AAOA,SAAKC,OAAL,GAAe,IAAIrB,OAAO,CAACsB,cAAZ,CAA2B,SAA3B,EAAsCH,MAAtC,EAA8C,KAAKxB,KAAnD,CAAf;AACA,SAAK0B,OAAL,CAAaE,aAAb,GAA6B,EAA7B;AACA,SAAKF,OAAL,CAAaG,aAAb,GAA6B,EAA7B;AACA,SAAKH,OAAL,CAAaI,SAAb,GAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAzB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACH;;AAED7B,EAAAA,WAAW,GAAG;AACV,SAAK8B,YAAL,GAAoB,IAAI3B,OAAO,CAAC4B,YAAZ,CAAyB,cAAzB,EAAyC,KAAKjC,KAA9C,CAApB;AACA,SAAKgC,YAAL,CAAkBE,SAAlB,GAA8BrC,MAAM,CAACY,MAAP,CAAc0B,IAAd,CAAmBD,SAAjD;AACA,SAAKF,YAAL,CAAkBI,SAAlB,GAA8BvC,MAAM,CAACY,MAAP,CAAc0B,IAAd,CAAmBC,SAAjD;AACA,SAAKJ,YAAL,CAAkBK,SAAlB,GAA8BxC,MAAM,CAACY,MAAP,CAAc0B,IAAd,CAAmBE,SAAjD;AACA,SAAKL,YAAL,CAAkBM,eAAlB,GAAoC,KAApC;AACA,SAAKN,YAAL,CAAkBO,kBAAlB,GAAuC1C,MAAM,CAACY,MAAP,CAAc0B,IAAd,CAAmBI,kBAA1D;AACA,SAAKP,YAAL,CAAkBQ,OAAlB,GAA4B3C,MAAM,CAACY,MAAP,CAAc0B,IAAd,CAAmBK,OAA/C,CAPU,CAQV;;AACA,SAAKd,OAAL,CAAae,IAAb,CAAkBC,QAAlB,GAA6B,KAAKV,YAAlC;AAEH;;AApEQ;;AAuEb,eAAelC,MAAf","sourcesContent":["import Config from \"./Config\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n        // this.createGround();\n        this.createDynamicTerrain();\n        this.setMaterial();\n    }\n\n    createGround() {\n        // this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n        //     \"ground\", \n        //     Config.ground.heightMap, \n        //     Config.ground.width, \n        //     Config.ground.height, \n        //     Config.ground.subdivisions, \n        //     0, \n        //     Config.ground.textureHeight, \n        //     this.scene, \n        //     true\n        // );\n\n        this.defaultGround = new BABYLON.MeshBuilder.CreateGround(\"ground\", {\n            width: Config.ground.width,\n            height: Config.ground.height\n        });\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n        this.defaultGround.position.x = Config.ground.x;\n        this.defaultGround.position.z = Config.ground.z;\n    }\n\n    createDynamicTerrain() {\n        let mapSubX = 500,\n            mapSubZ = 500,\n            mapData = new Float32Array(mapSubX * mapSubZ * 3);   \n\n        // for (var l = 0; l < mapSubZ; l++) {           \n        //     for (var w = 0; w < mapSubX; w++) {                \n        //         mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //         mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n        //         mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //    }            \n        // }\n\n        var params = {\n            mapData: mapData,\n            mapSubX: mapSubX,\n            mapSubZ: mapSubZ,\n            terrainSub: 200\n        };\n\n        this.terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        this.terrain.subToleranceX = 10;\n        this.terrain.subToleranceZ = 10;\n        this.terrain.LODLimits = [4, 3, 2, 1, 1];\n        this.terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.grid.opacity;\n        // this.defaultGround.material = this.gridMaterial;\n        this.terrain.mesh.material = this.gridMaterial;\n\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}