{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n// import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nvar Ground =\n/*#__PURE__*/\nfunction () {\n  function Ground(scene) {\n    _classCallCheck(this, Ground);\n\n    this.scene = scene;\n    this.createGround(); // this.setTerrain();\n\n    this.setMaterial();\n  }\n\n  _createClass(Ground, [{\n    key: \"createGround\",\n    value: function createGround() {\n      this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.ground.heightMap, Config.ground.width, Config.ground.height, Config.ground.subdivisions, 0, Config.ground.textureHeight, this.scene, true);\n      this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n      this.defaultGround.position.x = Config.ground.x;\n      this.defaultGround.position.z = Config.ground.z;\n    }\n  }, {\n    key: \"setTerrain\",\n    value: function setTerrain() {// let script = document.createElement(\"script\");\n      // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n      // document.body.appendChild(script);\n      // script.onload = () => {\n      //     var mapSubX = 500;\n      //     var mapSubZ = 300;\n      //     var terrainSub = 100;\n      //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n      //     for (var l = 0; l < mapSubZ; l++) {           \n      //         for (var w = 0; w < mapSubX; w++) {                \n      //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      //        }            \n      //     }\n      //     var params = {\n      //         mapData: mapData,\n      //         mapSubX: mapSubX,\n      //         mapSubZ: mapSubZ,\n      //         terrainSub: terrainSub\n      //     };\n      //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      //     terrain.mesh.material = terrainMaterial;\n      //     terrain.subToleranceX = 8;\n      //     terrain.subToleranceZ = 8;\n      //     terrain.LODLimits = [4, 3, 2, 1, 1];\n      //     terrainCreated = true;\n      // }\n      // var mapSubX = 500;\n      //     var mapSubZ = 300;\n      //     var terrainSub = 100;\n      //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n      //     for (var l = 0; l < mapSubZ; l++) {           \n      //         for (var w = 0; w < mapSubX; w++) {                \n      //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      //        }            \n      //     }\n      //     var params = {\n      //         mapData: mapData,\n      //         mapSubX: mapSubX,\n      //         mapSubZ: mapSubZ,\n      //         terrainSub: terrainSub\n      //     };\n      // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      // terrain.mesh.material = terrainMaterial;\n      // terrain.subToleranceX = 8;\n      // terrain.subToleranceZ = 8;\n      // terrain.LODLimits = [4, 3, 2, 1, 1];\n      // terrainCreated = true;\n    }\n  }, {\n    key: \"setMaterial\",\n    value: function setMaterial() {\n      this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n      this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n      this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n      this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n      this.gridMaterial.backFaceCulling = false;\n      this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n      this.gridMaterial.opacity = Config.ground.grid.opacity;\n      this.gridMaterial.emissiveColor = Config.ground.grid.lineColor;\n      this.defaultGround.material = this.gridMaterial;\n    }\n  }]);\n\n  return Ground;\n}();\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["Config","Materials","Ground","scene","createGround","setMaterial","defaultGround","BABYLON","Mesh","CreateGroundFromHeightMap","ground","heightMap","width","height","subdivisions","textureHeight","rotate","Axis","Y","rotation","Space","WORLD","position","x","z","gridMaterial","GridMaterial","mainColor","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","emissiveColor","material"],"mappings":";;AAAA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;;IAEMC,M;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AACf,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,YAAL,GAHe,CAKf;;AAEA,SAAKC,WAAL;AACH;;;;mCAEc;AACX,WAAKC,aAAL,GAAqB,IAAIC,OAAO,CAACC,IAAR,CAAaC,yBAAjB,CACjB,QADiB,EAEjBT,MAAM,CAACU,MAAP,CAAcC,SAFG,EAGjBX,MAAM,CAACU,MAAP,CAAcE,KAHG,EAIjBZ,MAAM,CAACU,MAAP,CAAcG,MAJG,EAKjBb,MAAM,CAACU,MAAP,CAAcI,YALG,EAMjB,CANiB,EAOjBd,MAAM,CAACU,MAAP,CAAcK,aAPG,EAQjB,KAAKZ,KARY,EASjB,IATiB,CAArB;AAYA,WAAKG,aAAL,CAAmBU,MAAnB,CAA0BT,OAAO,CAACU,IAAR,CAAaC,CAAvC,EAA0ClB,MAAM,CAACU,MAAP,CAAcS,QAAxD,EAAkEZ,OAAO,CAACa,KAAR,CAAcC,KAAhF;AAEA,WAAKf,aAAL,CAAmBgB,QAAnB,CAA4BC,CAA5B,GAAgCvB,MAAM,CAACU,MAAP,CAAca,CAA9C;AACA,WAAKjB,aAAL,CAAmBgB,QAAnB,CAA4BE,CAA5B,GAAgCxB,MAAM,CAACU,MAAP,CAAcc,CAA9C;AACH;;;iCAEY,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;;kCAEa;AACV,WAAKC,YAAL,GAAoB,IAAIxB,SAAS,CAACyB,YAAd,CAA2B,cAA3B,EAA2C,KAAKvB,KAAhD,CAApB;AACA,WAAKsB,YAAL,CAAkBE,SAAlB,GAA8B3B,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBD,SAAjD;AACA,WAAKF,YAAL,CAAkBI,SAAlB,GAA8B7B,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBC,SAAjD;AACA,WAAKJ,YAAL,CAAkBK,SAAlB,GAA8B9B,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBE,SAAjD;AACA,WAAKL,YAAL,CAAkBM,eAAlB,GAAoC,KAApC;AACA,WAAKN,YAAL,CAAkBO,kBAAlB,GAAuChC,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBI,kBAA1D;AACA,WAAKP,YAAL,CAAkBQ,OAAlB,GAA4BjC,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBK,OAA/C;AACA,WAAKR,YAAL,CAAkBS,aAAlB,GAAkClC,MAAM,CAACU,MAAP,CAAckB,IAAd,CAAmBC,SAArD;AACA,WAAKvB,aAAL,CAAmB6B,QAAnB,GAA8B,KAAKV,YAAnC;AACH;;;;;;AAGL,eAAevB,MAAf","sourcesContent":["// import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        // this.setTerrain();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n        \n        this.defaultGround.position.x = Config.ground.x;\n        this.defaultGround.position.z = Config.ground.z;\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        // terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        // terrain.mesh.material = terrainMaterial;\n        // terrain.subToleranceX = 8;\n        // terrain.subToleranceZ = 8;\n        // terrain.LODLimits = [4, 3, 2, 1, 1];\n        // terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.grid.opacity;\n        this.gridMaterial.emissiveColor = Config.ground.grid.lineColor;\n        this.defaultGround.material = this.gridMaterial;\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}