{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nvar Ground =\n/*#__PURE__*/\nfunction () {\n  function Ground(scene) {\n    _classCallCheck(this, Ground);\n\n    this.scene = scene;\n    this.createGround(); // this.setTerrain();\n\n    this.setMaterial();\n  }\n\n  _createClass(Ground, [{\n    key: \"createGround\",\n    value: function createGround() {\n      this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", Config.ground.heightMap, Config.ground.width, Config.ground.height, Config.ground.subdivisions, 0, Config.ground.textureHeight, this.scene, true);\n      this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD); // this.defaultGround.setPosition(new BABYLON.Vector3(2, 2, 0));\n    }\n  }, {\n    key: \"setTerrain\",\n    value: function setTerrain() {\n      // let script = document.createElement(\"script\");\n      // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n      // document.body.appendChild(script);\n      // script.onload = () => {\n      //     var mapSubX = 500;\n      //     var mapSubZ = 300;\n      //     var terrainSub = 100;\n      //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n      //     for (var l = 0; l < mapSubZ; l++) {           \n      //         for (var w = 0; w < mapSubX; w++) {                \n      //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      //        }            \n      //     }\n      //     var params = {\n      //         mapData: mapData,\n      //         mapSubX: mapSubX,\n      //         mapSubZ: mapSubZ,\n      //         terrainSub: terrainSub\n      //     };\n      //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      //     terrain.mesh.material = terrainMaterial;\n      //     terrain.subToleranceX = 8;\n      //     terrain.subToleranceZ = 8;\n      //     terrain.LODLimits = [4, 3, 2, 1, 1];\n      //     terrainCreated = true;\n      // }\n      // var mapSubX = 500;\n      //     var mapSubZ = 300;\n      //     var terrainSub = 100;\n      //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n      //     for (var l = 0; l < mapSubZ; l++) {           \n      //         for (var w = 0; w < mapSubX; w++) {                \n      //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n      //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n      //        }            \n      //     }\n      //     var params = {\n      //         mapData: mapData,\n      //         mapSubX: mapSubX,\n      //         mapSubZ: mapSubZ,\n      //         terrainSub: terrainSub\n      //     };\n      terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      terrain.mesh.material = terrainMaterial;\n      terrain.subToleranceX = 8;\n      terrain.subToleranceZ = 8;\n      terrain.LODLimits = [4, 3, 2, 1, 1];\n      terrainCreated = true;\n    }\n  }, {\n    key: \"setMaterial\",\n    value: function setMaterial() {\n      this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n      this.grid.mainColor = Config.ground.grid.mainColor;\n      this.grid.lineColor = Config.ground.grid.lineColor;\n      this.grid.gridRatio = Config.ground.grid.gridRatio;\n      this.grid.backFaceCulling = false;\n      this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n      this.grid.opacity = Config.ground.grid.opacity;\n      this.defaultGround.material = this.grid;\n    }\n  }]);\n\n  return Ground;\n}();\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["BABYLON","Config","Materials","Ground","scene","createGround","setMaterial","defaultGround","Mesh","CreateGroundFromHeightMap","ground","heightMap","width","height","subdivisions","textureHeight","rotate","Axis","Y","rotation","Space","WORLD","terrain","DynamicTerrain","params","mesh","material","terrainMaterial","subToleranceX","subToleranceZ","LODLimits","terrainCreated","grid","GridMaterial","mainColor","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity"],"mappings":";;AAAA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;;IAEMC,M;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AACf,SAAKA,KAAL,GAAaA,KAAb;AAEA,SAAKC,YAAL,GAHe,CAKf;;AAEA,SAAKC,WAAL;AACH;;;;mCAEc;AACX,WAAKC,aAAL,GAAqB,IAAIP,OAAO,CAACQ,IAAR,CAAaC,yBAAjB,CACjB,QADiB,EAEjBR,MAAM,CAACS,MAAP,CAAcC,SAFG,EAGjBV,MAAM,CAACS,MAAP,CAAcE,KAHG,EAIjBX,MAAM,CAACS,MAAP,CAAcG,MAJG,EAKjBZ,MAAM,CAACS,MAAP,CAAcI,YALG,EAMjB,CANiB,EAOjBb,MAAM,CAACS,MAAP,CAAcK,aAPG,EAQjB,KAAKX,KARY,EASjB,IATiB,CAArB;AAYA,WAAKG,aAAL,CAAmBS,MAAnB,CAA0BhB,OAAO,CAACiB,IAAR,CAAaC,CAAvC,EAA0CjB,MAAM,CAACS,MAAP,CAAcS,QAAxD,EAAkEnB,OAAO,CAACoB,KAAR,CAAcC,KAAhF,EAbW,CAeX;AACH;;;iCAEY;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEAC,MAAAA,OAAO,GAAG,IAAItB,OAAO,CAACuB,cAAZ,CAA2B,SAA3B,EAAsCC,MAAtC,EAA8C,KAAKpB,KAAnD,CAAV;AACAkB,MAAAA,OAAO,CAACG,IAAR,CAAaC,QAAb,GAAwBC,eAAxB;AACAL,MAAAA,OAAO,CAACM,aAAR,GAAwB,CAAxB;AACAN,MAAAA,OAAO,CAACO,aAAR,GAAwB,CAAxB;AACAP,MAAAA,OAAO,CAACQ,SAAR,GAAoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAApB;AACAC,MAAAA,cAAc,GAAG,IAAjB;AACH;;;kCAEa;AACV,WAAKC,IAAL,GAAY,IAAI9B,SAAS,CAAC+B,YAAd,CAA2B,cAA3B,EAA2C,KAAK7B,KAAhD,CAAZ;AACA,WAAK4B,IAAL,CAAUE,SAAV,GAAsBjC,MAAM,CAACS,MAAP,CAAcsB,IAAd,CAAmBE,SAAzC;AACA,WAAKF,IAAL,CAAUG,SAAV,GAAsBlC,MAAM,CAACS,MAAP,CAAcsB,IAAd,CAAmBG,SAAzC;AACA,WAAKH,IAAL,CAAUI,SAAV,GAAsBnC,MAAM,CAACS,MAAP,CAAcsB,IAAd,CAAmBI,SAAzC;AACA,WAAKJ,IAAL,CAAUK,eAAV,GAA4B,KAA5B;AACA,WAAKL,IAAL,CAAUM,kBAAV,GAA+BrC,MAAM,CAACS,MAAP,CAAcsB,IAAd,CAAmBM,kBAAlD;AACA,WAAKN,IAAL,CAAUO,OAAV,GAAoBtC,MAAM,CAACS,MAAP,CAAcsB,IAAd,CAAmBO,OAAvC;AACA,WAAKhC,aAAL,CAAmBmB,QAAnB,GAA8B,KAAKM,IAAnC;AACH;;;;;;AAGL,eAAe7B,MAAf","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport Config from \"./Config\";\nimport * as Materials from \"babylonjs-materials\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.createGround();\n\n        // this.setTerrain();\n\n        this.setMaterial();\n    }\n\n    createGround() {\n        this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n            \"ground\", \n            Config.ground.heightMap, \n            Config.ground.width, \n            Config.ground.height, \n            Config.ground.subdivisions, \n            0, \n            Config.ground.textureHeight, \n            this.scene, \n            true\n        );\n\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n\n        // this.defaultGround.setPosition(new BABYLON.Vector3(2, 2, 0));\n    }\n\n    setTerrain() {\n        // let script = document.createElement(\"script\");\n        // script.src = \"https://cdn.rawgit.com/BabylonJS/Extensions/master/DynamicTerrain/dist/babylon.dynamicTerrain.min.js\";\n        // document.body.appendChild(script);\n        // script.onload = () => {\n        //     var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        //     terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        //     terrain.mesh.material = terrainMaterial;\n        //     terrain.subToleranceX = 8;\n        //     terrain.subToleranceZ = 8;\n        //     terrain.LODLimits = [4, 3, 2, 1, 1];\n        //     terrainCreated = true;\n        // }\n\n        // var mapSubX = 500;\n        //     var mapSubZ = 300;\n        //     var terrainSub = 100;\n        //     var mapData = new Float32Array(mapSubX * mapSubZ * 3);  \n\n        //     for (var l = 0; l < mapSubZ; l++) {           \n        //         for (var w = 0; w < mapSubX; w++) {                \n        //             mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin((l + 1) / 2) * Math.cos(w / 2) * 2.0;\n        //             mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        //        }            \n        //     }\n\n        //     var params = {\n        //         mapData: mapData,\n        //         mapSubX: mapSubX,\n        //         mapSubZ: mapSubZ,\n        //         terrainSub: terrainSub\n        //     };\n\n        terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        terrain.mesh.material = terrainMaterial;\n        terrain.subToleranceX = 8;\n        terrain.subToleranceZ = 8;\n        terrain.LODLimits = [4, 3, 2, 1, 1];\n        terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.grid = new Materials.GridMaterial(\"gridMaterial\", this.scene);\n        this.grid.mainColor = Config.ground.grid.mainColor;\n        this.grid.lineColor = Config.ground.grid.lineColor;\n        this.grid.gridRatio = Config.ground.grid.gridRatio;\n        this.grid.backFaceCulling = false;\n        this.grid.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.grid.opacity = Config.ground.grid.opacity;\n        this.defaultGround.material = this.grid;\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}