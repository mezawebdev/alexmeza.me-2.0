{"ast":null,"code":"var _jsxFileName = \"/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"../../world.config.js\";\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  resize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.engine.resize();\n  }\n\n  componentDidMount() {\n    this.engine = new BABYLON.Engine(this.canvas.current, true);\n    this.scene = new BABYLON.Scene(this.engine);\n    this.camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0, 0, 5), this.scene);\n    this.light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n    this.sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {\n      diameter: 2\n    }, this.scene);\n\n    if (Config.debug) {\n      this.camera.attachControl(this.canvas.current, true);\n    }\n\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n    this.resize();\n    window.addEventListener(\"resize\", () => {\n      this.resize();\n    });\n  }\n\n  render() {\n    // this.camera.attachControl(canvas, true);\n    // this.engine.runRenderLoop(() => { \n    //     console.log(this);\n    //     this.scene.render();\n    // });\n    // window.addEventListener(\"resize\", () => { \n    //     this.engine.resize();\n    // });\n    return __jsx(\"canvas\", {\n      id: \"canvas\",\n      ref: this.canvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default World;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js"],"names":["React","BABYLON","Config","World","Component","constructor","props","canvas","createRef","resize","current","width","window","innerWidth","height","innerHeight","engine","componentDidMount","Engine","scene","Scene","camera","ArcRotateCamera","Math","PI","Vector3","light1","HemisphericLight","sphere","MeshBuilder","CreateSphere","diameter","debug","attachControl","runRenderLoop","render","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcP,KAAK,CAACQ,SAAN,EAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,SAAKF,MAAL,CAAYG,OAAZ,CAAoBC,KAApB,GAA4BC,MAAM,CAACC,UAAnC;AACA,SAAKN,MAAL,CAAYG,OAAZ,CAAoBI,MAApB,GAA6BF,MAAM,CAACG,WAApC;AACA,SAAKC,MAAL,CAAYP,MAAZ;AACH;;AAEDQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKD,MAAL,GAAc,IAAIf,OAAO,CAACiB,MAAZ,CAAmB,KAAKX,MAAL,CAAYG,OAA/B,EAAwC,IAAxC,CAAd;AACA,SAAKS,KAAL,GAAa,IAAIlB,OAAO,CAACmB,KAAZ,CAAkB,KAAKJ,MAAvB,CAAb;AACA,SAAKK,MAAL,GAAc,IAAIpB,OAAO,CAACqB,eAAZ,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,EAAL,GAAU,CAAhD,EAAmDD,IAAI,CAACC,EAAL,GAAU,CAA7D,EAAgE,CAAhE,EAAmE,IAAIvB,OAAO,CAACwB,OAAZ,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,CAAnE,EAA+F,KAAKN,KAApG,CAAd;AACA,SAAKO,MAAL,GAAc,IAAIzB,OAAO,CAAC0B,gBAAZ,CAA6B,QAA7B,EAAuC,IAAI1B,OAAO,CAACwB,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAvC,EAAqE,KAAKN,KAA1E,CAAd;AACA,SAAKS,MAAL,GAAc3B,OAAO,CAAC4B,WAAR,CAAoBC,YAApB,CAAiC,QAAjC,EAA2C;AAACC,MAAAA,QAAQ,EAAC;AAAV,KAA3C,EAAyD,KAAKZ,KAA9D,CAAd;;AAEA,QAAIjB,MAAM,CAAC8B,KAAX,EAAkB;AACd,WAAKX,MAAL,CAAYY,aAAZ,CAA0B,KAAK1B,MAAL,CAAYG,OAAtC,EAA+C,IAA/C;AACH;;AAED,SAAKM,MAAL,CAAYkB,aAAZ,CAA0B,MAAM;AAC5B,WAAKf,KAAL,CAAWgB,MAAX;AACH,KAFD;AAIA,SAAK1B,MAAL;AAEAG,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpC,WAAK3B,MAAL;AACH,KAFD;AAGH;;AAED0B,EAAAA,MAAM,GAAG;AACL;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,WACI;AACI,MAAA,EAAE,EAAC,QADP;AAEI,MAAA,GAAG,EAAG,KAAK5B,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AApD+B;;AAuDpC,eAAeJ,KAAf","sourcesContent":["import React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"../../world.config.js\";\n\nclass World extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvas = React.createRef();\n    }\n\n    resize() {\n        this.canvas.current.width = window.innerWidth;\n        this.canvas.current.height = window.innerHeight;\n        this.engine.resize();\n    }\n\n    componentDidMount() {\n        this.engine = new BABYLON.Engine(this.canvas.current, true);\n        this.scene = new BABYLON.Scene(this.engine);\n        this.camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new BABYLON.Vector3(0,0,5), this.scene);\n        this.light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(1, 1, 0), this.scene);\n        this.sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter:2}, this.scene);\n\n        if (Config.debug) {\n            this.camera.attachControl(this.canvas.current, true);\n        }\n\n        this.engine.runRenderLoop(() => { \n            this.scene.render();\n        });\n\n        this.resize();\n\n        window.addEventListener(\"resize\", () => { \n            this.resize();\n        });\n    }\n\n    render() {\n        // this.camera.attachControl(canvas, true);\n\n        // this.engine.runRenderLoop(() => { \n        //     console.log(this);\n        //     this.scene.render();\n        // });\n\n        // window.addEventListener(\"resize\", () => { \n        //     this.engine.resize();\n        // });\n\n        return (\n            <canvas \n                id=\"canvas\"\n                ref={ this.canvas }>\n            </canvas>\n        );\n    }\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}