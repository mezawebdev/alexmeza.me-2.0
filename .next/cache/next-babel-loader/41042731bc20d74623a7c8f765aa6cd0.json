{"ast":null,"code":"var _jsxFileName = \"/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"./Config\";\nimport Ground from \"./Ground\";\nimport Camera from \"./Camera\";\nimport Light from \"./Light\";\nimport Utils from \"./Utils\";\nimport Effects from \"./Effects\";\nimport Stars from \"./Stars\";\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  resize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.engine.resize();\n  }\n\n  startEngine() {\n    this.engine = new BABYLON.Engine(this.canvas.current, true);\n    this.scene = new BABYLON.Scene(this.engine);\n    this.camera = new Camera(this.canvas.current, this.scene);\n  }\n\n  renderWorld() {\n    this.scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);\n    this.light = new Light(this.scene);\n    this.ground = new Ground(this.scene);\n    this.effects = new Effects(this.scene);\n  }\n\n  componentDidMount() {\n    this.startEngine();\n    this.renderWorld();\n\n    if (Config.debug.axis) {\n      Utils.showWorldAxis(Config.debug.axisSize, this.scene);\n    }\n\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n    this.stars = new Stars();\n    this.resize();\n    window.addEventListener(\"resize\", () => {\n      this.resize();\n    });\n  }\n\n  render() {\n    return __jsx(\"canvas\", {\n      id: \"canvas\",\n      style: Config.canvas.style,\n      ref: this.canvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default World;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/World.js"],"names":["React","BABYLON","Config","Ground","Camera","Light","Utils","Effects","Stars","World","Component","constructor","props","canvas","createRef","resize","current","width","window","innerWidth","height","innerHeight","engine","startEngine","Engine","scene","Scene","camera","renderWorld","clearColor","Color4","light","ground","effects","componentDidMount","debug","axis","showWorldAxis","axisSize","runRenderLoop","render","stars","addEventListener","style"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,KAAN,SAAoBT,KAAK,CAACU,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcb,KAAK,CAACc,SAAN,EAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,SAAKF,MAAL,CAAYG,OAAZ,CAAoBC,KAApB,GAA4BC,MAAM,CAACC,UAAnC;AACA,SAAKN,MAAL,CAAYG,OAAZ,CAAoBI,MAApB,GAA6BF,MAAM,CAACG,WAApC;AACA,SAAKC,MAAL,CAAYP,MAAZ;AACH;;AAEDQ,EAAAA,WAAW,GAAG;AACV,SAAKD,MAAL,GAAc,IAAIrB,OAAO,CAACuB,MAAZ,CAAmB,KAAKX,MAAL,CAAYG,OAA/B,EAAwC,IAAxC,CAAd;AACA,SAAKS,KAAL,GAAa,IAAIxB,OAAO,CAACyB,KAAZ,CAAkB,KAAKJ,MAAvB,CAAb;AACA,SAAKK,MAAL,GAAc,IAAIvB,MAAJ,CAAW,KAAKS,MAAL,CAAYG,OAAvB,EAAgC,KAAKS,KAArC,CAAd;AACH;;AAEDG,EAAAA,WAAW,GAAG;AACV,SAAKH,KAAL,CAAWI,UAAX,GAAwB,IAAI5B,OAAO,CAAC6B,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAxB;AACA,SAAKC,KAAL,GAAa,IAAI1B,KAAJ,CAAU,KAAKoB,KAAf,CAAb;AACA,SAAKO,MAAL,GAAc,IAAI7B,MAAJ,CAAW,KAAKsB,KAAhB,CAAd;AACA,SAAKQ,OAAL,GAAe,IAAI1B,OAAJ,CAAY,KAAKkB,KAAjB,CAAf;AACH;;AAEDS,EAAAA,iBAAiB,GAAG;AAChB,SAAKX,WAAL;AAEA,SAAKK,WAAL;;AAEA,QAAI1B,MAAM,CAACiC,KAAP,CAAaC,IAAjB,EAAuB;AACnB9B,MAAAA,KAAK,CAAC+B,aAAN,CAAoBnC,MAAM,CAACiC,KAAP,CAAaG,QAAjC,EAA2C,KAAKb,KAAhD;AACH;;AAED,SAAKH,MAAL,CAAYiB,aAAZ,CAA0B,MAAM;AAC5B,WAAKd,KAAL,CAAWe,MAAX;AACH,KAFD;AAIA,SAAKC,KAAL,GAAa,IAAIjC,KAAJ,EAAb;AAEA,SAAKO,MAAL;AAEAG,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpC,WAAK3B,MAAL;AACH,KAFD;AAGH;;AAEDyB,EAAAA,MAAM,GAAG;AACL,WACI;AACI,MAAA,EAAE,EAAC,QADP;AAEI,MAAA,KAAK,EAAGtC,MAAM,CAACW,MAAP,CAAc8B,KAF1B;AAGI,MAAA,GAAG,EAAG,KAAK9B,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAvD+B;;AA0DpC,eAAeJ,KAAf","sourcesContent":["import React from \"react\";\nimport * as BABYLON from 'babylonjs';\nimport Config from \"./Config\";\nimport Ground from \"./Ground\";\nimport Camera from \"./Camera\";\nimport Light from \"./Light\";\nimport Utils from \"./Utils\";\nimport Effects from \"./Effects\";\nimport Stars from \"./Stars\";\n\nclass World extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvas = React.createRef();\n    }\n\n    resize() {\n        this.canvas.current.width = window.innerWidth;\n        this.canvas.current.height = window.innerHeight;\n        this.engine.resize();\n    }\n\n    startEngine() {\n        this.engine = new BABYLON.Engine(this.canvas.current, true);\n        this.scene = new BABYLON.Scene(this.engine);\n        this.camera = new Camera(this.canvas.current, this.scene);\n    }\n\n    renderWorld() {\n        this.scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);\n        this.light = new Light(this.scene);\n        this.ground = new Ground(this.scene);\n        this.effects = new Effects(this.scene);\n    }\n\n    componentDidMount() {\n        this.startEngine();\n\n        this.renderWorld();\n\n        if (Config.debug.axis) {\n            Utils.showWorldAxis(Config.debug.axisSize, this.scene);\n        }\n\n        this.engine.runRenderLoop(() => { \n            this.scene.render();\n        });\n\n        this.stars = new Stars();\n\n        this.resize();\n\n        window.addEventListener(\"resize\", () => { \n            this.resize();\n        });\n    }\n\n    render() {\n        return (\n            <canvas \n                id=\"canvas\"\n                style={ Config.canvas.style }\n                ref={ this.canvas }>\n            </canvas>\n        );\n    }\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}