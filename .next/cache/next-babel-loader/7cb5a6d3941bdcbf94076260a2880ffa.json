{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport Config from \"./Config\";\n\nvar Ground =\n/*#__PURE__*/\nfunction () {\n  function Ground(scene) {\n    _classCallCheck(this, Ground);\n\n    this.scene = scene; // this.createGround();\n\n    this.createDynamicTerrain();\n    this.setMaterial();\n  }\n\n  _createClass(Ground, [{\n    key: \"createGround\",\n    value: function createGround() {\n      // this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n      //     \"ground\", \n      //     Config.ground.heightMap, \n      //     Config.ground.width, \n      //     Config.ground.height, \n      //     Config.ground.subdivisions, \n      //     0, \n      //     Config.ground.textureHeight, \n      //     this.scene, \n      //     true\n      // );\n      this.defaultGround = new BABYLON.MeshBuilder.CreateGround(\"ground\", {\n        width: Config.ground.width,\n        height: Config.ground.height\n      });\n      this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n      this.defaultGround.position.x = Config.ground.x;\n      this.defaultGround.position.z = Config.ground.z;\n    }\n  }, {\n    key: \"createDynamicTerrain\",\n    value: function createDynamicTerrain() {\n      var mapSubX = 500,\n          mapSubZ = 200,\n          terrainSub = 10,\n          mapData = new Float32Array(mapSubX * mapSubZ * 2.5);\n\n      for (var l = 0; l < mapSubZ; l++) {\n        for (var w = 0; w < mapSubX; w++) {\n          mapData[3 * (l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n          mapData[3 * (l * mapSubX + w) + 1] = w / (l + 1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n          mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n        }\n      }\n\n      var params = {\n        mapData: mapData,\n        mapSubX: mapSubX,\n        mapSubZ: mapSubZ,\n        terrainSub: terrainSub\n      };\n      this.terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n      this.terrain.subToleranceX = 10;\n      this.terrain.subToleranceZ = 10;\n      this.terrain.LODLimits = [4, 3, 2, 1, 1];\n      this.terrainCreated = true;\n    }\n  }, {\n    key: \"setMaterial\",\n    value: function setMaterial() {\n      this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n      this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n      this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n      this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n      this.gridMaterial.backFaceCulling = false;\n      this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n      this.gridMaterial.opacity = Config.ground.grid.opacity; // this.defaultGround.material = this.gridMaterial;\n\n      this.terrain.mesh.material = this.gridMaterial;\n    }\n  }]);\n\n  return Ground;\n}();\n\nexport default Ground;","map":{"version":3,"sources":["/Users/RescueAMeza_SD/Desktop/mezaWebLab/Personal/alexmeza.me/components/World/Ground.js"],"names":["Config","Ground","scene","createDynamicTerrain","setMaterial","defaultGround","BABYLON","MeshBuilder","CreateGround","width","ground","height","rotate","Axis","Y","rotation","Space","WORLD","position","x","z","mapSubX","mapSubZ","terrainSub","mapData","Float32Array","l","w","Math","sin","cos","params","terrain","DynamicTerrain","subToleranceX","subToleranceZ","LODLimits","terrainCreated","gridMaterial","GridMaterial","mainColor","grid","lineColor","gridRatio","backFaceCulling","majorUnitFrequency","opacity","mesh","material"],"mappings":"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","sourcesContent":["import Config from \"./Config\";\n\nclass Ground {\n    constructor(scene) {\n        this.scene = scene;\n        // this.createGround();\n        this.createDynamicTerrain();\n        this.setMaterial();\n    }\n\n    createGround() {\n        // this.defaultGround = new BABYLON.Mesh.CreateGroundFromHeightMap(\n        //     \"ground\", \n        //     Config.ground.heightMap, \n        //     Config.ground.width, \n        //     Config.ground.height, \n        //     Config.ground.subdivisions, \n        //     0, \n        //     Config.ground.textureHeight, \n        //     this.scene, \n        //     true\n        // );\n\n        this.defaultGround = new BABYLON.MeshBuilder.CreateGround(\"ground\", {\n            width: Config.ground.width,\n            height: Config.ground.height\n        });\n        this.defaultGround.rotate(BABYLON.Axis.Y, Config.ground.rotation, BABYLON.Space.WORLD);\n        this.defaultGround.position.x = Config.ground.x;\n        this.defaultGround.position.z = Config.ground.z;\n    }\n\n    createDynamicTerrain() {\n        let mapSubX = 500,\n            mapSubZ = 200,\n            terrainSub = 10,\n            mapData = new Float32Array(mapSubX * mapSubZ * 2.5);   \n\n        for (var l = 0; l < mapSubZ; l++) {           \n            for (var w = 0; w < mapSubX; w++) {                \n                mapData[3 *(l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n                mapData[3 * (l * mapSubX + w) + 1] = w / (l +1) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n                mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n           }            \n        }\n\n        var params = {\n            mapData: mapData,\n            mapSubX: mapSubX,\n            mapSubZ: mapSubZ,\n            terrainSub: terrainSub\n        };\n\n        this.terrain = new BABYLON.DynamicTerrain(\"terrain\", params, this.scene);\n        this.terrain.subToleranceX = 10;\n        this.terrain.subToleranceZ = 10;\n        this.terrain.LODLimits = [4, 3, 2, 1, 1];\n        this.terrainCreated = true;\n    }\n\n    setMaterial() {\n        this.gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", this.scene);\n        this.gridMaterial.mainColor = Config.ground.grid.mainColor;\n        this.gridMaterial.lineColor = Config.ground.grid.lineColor;\n        this.gridMaterial.gridRatio = Config.ground.grid.gridRatio;\n        this.gridMaterial.backFaceCulling = false;\n        this.gridMaterial.majorUnitFrequency = Config.ground.grid.majorUnitFrequency;\n        this.gridMaterial.opacity = Config.ground.grid.opacity;\n        // this.defaultGround.material = this.gridMaterial;\n        this.terrain.mesh.material = this.gridMaterial;\n\n    }\n}\n\nexport default Ground;"]},"metadata":{},"sourceType":"module"}